<doxygen version="1.9.1" xml:lang="en-US">
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structzk_accel_axis_data_type" kind="struct" language="C++" prot="public">
        <compoundname>zkAccelAxisDataType</compoundname>
        <includes refid="zk__app__utils_8h" local="no">zk_app_utils.h</includes>
        <sectiondef kind="public-attrib">
            <memberdef kind="variable" id="structzk_accel_axis_data_type_1a0b0263b57b8cfdee66bc8ba88832f30a" prot="public" static="no" mutable="no">
                <type>double</type>
                <definition>double zkAccelAxisDataType::g</definition>
                <argsstring/>
                <name>g</name>
                <briefdescription/>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>the axis reading in units of g-force</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="98" column="12" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" bodystart="98" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="structzk_accel_axis_data_type_1af3b1fd34e286b65f39293b9035460966" prot="public" static="no" mutable="no">
                <type>int</type>
                <definition>int zkAccelAxisDataType::tapDirection</definition>
                <argsstring/>
                <name>tapDirection</name>
                <briefdescription/>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>the direction of the force along the axis which caused a tap event: -1 = negative +1 = positive 0 = did not cause a tap event</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="99" column="9" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" bodystart="99" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>zkGetAccelerometer data output. </para>
        </briefdescription>
        <detaileddescription>
            <simplesect kind="description"/>
        </detaileddescription>
        <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="96" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" bodystart="97" bodyend="104"/>
        <listofallmembers>
            <member refid="structzk_accel_axis_data_type_1a0b0263b57b8cfdee66bc8ba88832f30a" prot="public" virt="non-virtual">
                <scope>zkAccelAxisDataType</scope>
                <name>g</name>
            </member>
            <member refid="structzk_accel_axis_data_type_1af3b1fd34e286b65f39293b9035460966" prot="public" virt="non-virtual">
                <scope>zkAccelAxisDataType</scope>
                <name>tapDirection</name>
            </member>
        </listofallmembers>
    </compounddef>
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="zk__app__utils_8h" kind="file" language="C++">
        <compoundname>zk_app_utils.h</compoundname>
        <includes local="no">stdbool.h</includes>
        <includes local="no">stdint.h</includes>
        <incdepgraph>
            <node id="2">
                <label>stdbool.h</label>
            </node>
            <node id="3">
                <label>stdint.h</label>
            </node>
            <node id="1">
                <label>/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h</label>
                <link refid="zk__app__utils_8h"/>
                <childnode refid="2" relation="include"/>
                <childnode refid="3" relation="include"/>
            </node>
        </incdepgraph>
        <innerclass refid="structzk_accel_axis_data_type" prot="public">zkAccelAxisDataType</innerclass>
        <sectiondef kind="user-defined">
            <header>Zymkey Context</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a48a562243cd2902b84bb7347a540b8d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkOpen</definition>
                <argsstring>(zkCTX *ctx)</argsstring>
                <name>zkOpen</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref> *</type>
                    <declname>ctx</declname>
                </param>
                <briefdescription>
                    <para>Open a Zymkey context. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) returns a pointer to a Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="121" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="121" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1af427eb2bb73d78bb7acdf723ec99750a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkClose</definition>
                <argsstring>(zkCTX ctx)</argsstring>
                <name>zkClose</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <briefdescription>
                    <para>Close a Zymkey context. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The Zymkey context to close</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="129" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="129" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Random Number Generation</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a899ce7a6aebb542b5796fc027f021695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkCreateRandDataFile</definition>
                <argsstring>(zkCTX ctx, const char *dst_filename, int rdata_sz)</argsstring>
                <name>zkCreateRandDataFile</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>dst_filename</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>rdata_sz</declname>
                </param>
                <briefdescription>
                    <para>Fill a file with random numbers. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_filename</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Absolute path name for the destination file.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>rdata_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The number of random bytes to generate.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="146" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="146" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a7b2e6031f9f72f3810c47202ca04b8b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetRandBytes</definition>
                <argsstring>(zkCTX ctx, uint8_t **rdata, int rdata_sz)</argsstring>
                <name>zkGetRandBytes</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>rdata</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>rdata_sz</declname>
                </param>
                <briefdescription>
                    <para>Get an array of random bytes. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>rdata</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Pointer to a pointer of bytes.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>rdata_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The number of random bytes to generate.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="158" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="158" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Lock Data</header>
            <memberdef kind="function" id="zk__app__utils_8h_1aa0885303a749fe9c049f277ba8c11e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkLockDataF2F</definition>
                <argsstring>(zkCTX ctx, const char *src_pt_filename, const char *dst_ct_filename, bool use_shared_key)</argsstring>
                <name>zkLockDataF2F</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>src_pt_filename</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>dst_ct_filename</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                </param>
                <briefdescription>
                    <para>Lock up source (plaintext) data from a file and store the results (ciphertext) in a destination file. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function encrypts and signs a block of plaintext data from a file and stores the result in a destination file.</p>
                    </simplesect>
                    <simplesect kind="note">
                        <p>The zymkey has two keys that can be used for locking/unlocking operations, designated as 'shared' and 'one-way'.</p>
                        <ol>
                            <li>The one-way key is meant to lock up data only on the local host computer. Data encrypted using this key cannot be exported and deciphered anywhere else.</li>
                            <p>The one-way key is meant to lock up data only on the local host computer. Data encrypted using this key cannot be exported and deciphered anywhere else.</p>
                            <li>The shared key is meant for publishing data to other sources that have the capability to generate the shared key, such as the Zymbit cloud server.</li>
                            <p>The shared key is meant for publishing data to other sources that have the capability to generate the shared key, such as the Zymbit cloud server.</p>
                        </ol>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>src_pt_filename</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The absolute path to the file where the source (plaintext) data is located.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_ct_filename</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The absolute path to the file where the destination (ciphertext) data should be deposited.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>use_shared_key</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) This parameter specifies which key will be used to used to lock the data up. A value of 'false' specifies that the Zymkey will use the one-way key whereas 'true' specifies that the shared key will be used. Specify 'true' for publishing data to another that has the shared key (e.g. Zymbit cloud) and 'False' when the data is meant to reside exclusively withing the host computer.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="197" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="197" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1ad18866d7ca51cacbc750f8a39e6e1e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkLockDataB2F</definition>
                <argsstring>(zkCTX ctx, const uint8_t *src_pt, int src_pt_sz, const char *dst_ct_filename, bool use_shared_key)</argsstring>
                <name>zkLockDataB2F</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>src_pt</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>src_pt_sz</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>dst_ct_filename</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                </param>
                <briefdescription>
                    <para>Lock up source (plaintext) data from a byte array and store the results (ciphertext) in a destination file. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function encrypts and signs a block of binary plaintext data and stores the result in a destination file.</p>
                    </simplesect>
                    <simplesect kind="note">
                        <p>(See zkLockDataF2F for notes about keys)</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>src_pt</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Binary plaintext source byte array.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>src_pt_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Size of plaintext source data.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_ct_filename</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The absolute path to the file where the destination (ciphertext) data should be deposited.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>use_shared_key</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Specifies if shared key is to be used. See zkLockDataF2F.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="224" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="224" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1adfed9aa2d8ca8f631fb83ee51e82cb6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkLockDataF2B</definition>
                <argsstring>(zkCTX ctx, const char *src_pt_filename, uint8_t **dst_ct, int *dst_ct_sz, bool use_shared_key)</argsstring>
                <name>zkLockDataF2B</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>src_pt_filename</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>dst_ct</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>dst_ct_sz</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                </param>
                <briefdescription>
                    <para>Lock up source (plaintext) data from a file and store the results (ciphertext) in a destination byte array. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function encrypts and signs a block of plaintext data from a file and stores the result in a binary byte array.</p>
                    </simplesect>
                    <simplesect kind="note">
                        <p>(See zkLockDataF2F for notes about keys)</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>src_pt_filename</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The absolute path to the file where the source (plaintext) data is located.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_ct</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to a pointer to an array of unsigned bytes created by this function. This pointer must be freed by the application when no longer needed.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_ct_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to an integer which contains the size of the destination array.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>use_shared_key</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Specifies if shared key is to be used. See zkLockDataF2F.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="254" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="254" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a98ed878370908120142f5e353a369448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkLockDataB2B</definition>
                <argsstring>(zkCTX ctx, const uint8_t *src_pt, int src_pt_sz, uint8_t **dst_ct, int *dst_ct_sz, bool use_shared_key)</argsstring>
                <name>zkLockDataB2B</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>src_pt</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>src_pt_sz</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>dst_ct</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>dst_ct_sz</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                </param>
                <briefdescription>
                    <para>Lock up source (plaintext) data from a byte array and store the results (ciphertext) in a destination byte array. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function encrypts and signs a block of plaintext data and stores the result in a binary byte array.</p>
                    </simplesect>
                    <simplesect kind="note">
                        <p>(See zkLockDataF2F for notes about keys)</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>src_pt</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Binary plaintext source byte array.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>src_pt_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Size of plaintext source data.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_ct</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to a pointer to an array of unsigned bytes created by this function. This pointer must be freed by the application when no longer needed.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_ct_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to an integer which contains the size of the destination array.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>use_shared_key</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Specifies if shared key is to be used. See zkLockDataF2F.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="285" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="285" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Unlock Data</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a4a8c161f1dfcdf08d741f5926d5f77f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkUnlockDataF2F</definition>
                <argsstring>(zkCTX ctx, const char *src_ct_filename, const char *dst_pt_filename, bool use_shared_key)</argsstring>
                <name>zkUnlockDataF2F</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>src_ct_filename</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>dst_pt_filename</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                </param>
                <briefdescription>
                    <para>Unlock source (ciphertext) data from a file and store the results (plaintext) in a destination file. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function verifies a locked object signature and decrypts the associated ciphertext data.</p>
                    </simplesect>
                    <simplesect kind="note">
                        <p>(See zkLockDataF2F for notes about keys)</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>src_ct_filename</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The absolute path to the file where the source (ciphertext) data is located.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_pt_filename</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The absolute path to the file where the destination (plaintext) data should be deposited.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>use_shared_key</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) This parameter specifies which key will be used to used to lock the data up. A value of 'false' specifies that the Zymkey will use the one-way key whereas 'true' specifies that the shared key will be used. Specify 'true' for publishing data to another that has the shared key (e.g. Zymbit cloud) and 'False' when the data is meant to reside exclusively withing the host computer.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="322" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="322" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a2c63c6a31a2a9d787bb670c0e855795c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkUnlockDataB2F</definition>
                <argsstring>(zkCTX ctx, const uint8_t *src_ct, int src_ct_sz, const char *dst_pt_filename, bool use_shared_key)</argsstring>
                <name>zkUnlockDataB2F</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>src_ct</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>src_ct_sz</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>dst_pt_filename</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                </param>
                <briefdescription>
                    <para>Unlock source (ciphertext) data from a byte array and store the results (plaintext) in a destination file. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function verifies a locked object signature and decrypts the associated ciphertext data.</p>
                    </simplesect>
                    <simplesect kind="note">
                        <p>(See zkLockDataF2F for notes about keys)</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>src_ct</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Binary ciphertext source byte array.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>src_ct_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Size of ciphertext source data.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_pt_filename</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The absolute path to the file where the destination (plaintext) data should be deposited.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>use_shared_key</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Specifies if shared key is to be used. See zkLockDataF2F.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="348" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="348" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a7553aa0574bf2bfe13b7b32d2774baa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkUnlockDataF2B</definition>
                <argsstring>(zkCTX ctx, const char *src_ct_filename, uint8_t **dst_pt, int *dst_pt_sz, bool use_shared_key)</argsstring>
                <name>zkUnlockDataF2B</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>src_ct_filename</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>dst_pt</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>dst_pt_sz</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                </param>
                <briefdescription>
                    <para>Unlock source (ciphertext) data from a file and store the results (plaintext) in a destination byte array. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function verifies a locked object signature and decrypts the associated ciphertext data.</p>
                    </simplesect>
                    <simplesect kind="note">
                        <p>(See zkLockDataF2F for notes about keys)</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>src_ct_filename</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The absolute path to the file where the source (ciphertext) data is located.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_pt</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to a pointer to an array of unsigned bytes created by this function. This pointer must be freed by the application when no longer needed.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_pt_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to an integer which contains the size of the destination array.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>use_shared_key</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Specifies if shared key is to be used. See zkLockDataF2F.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="378" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="378" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1acfe501ceb80ecb6b51385a5573b4da3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkUnlockDataB2B</definition>
                <argsstring>(zkCTX ctx, const uint8_t *src_ct, int src_ct_sz, uint8_t **dst_pt, int *dst_pt_sz, bool use_shared_key)</argsstring>
                <name>zkUnlockDataB2B</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>src_ct</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>src_ct_sz</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>dst_pt</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>dst_pt_sz</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                </param>
                <briefdescription>
                    <para>Unlock source (ciphertext) data from a byte array and store the results (plaintext) in a destination byte array. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function verifies a locked object signature and decrypts the associated ciphertext data.</p>
                    </simplesect>
                    <simplesect kind="note">
                        <p>(See zkLockDataF2F for notes about keys)</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>src_ct</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Binary ciphertext source byte array.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>src_ct_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Size of ciphertext source data.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_pt</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to a pointer to an array of unsigned bytes created by this function. This pointer must be freed by the application when no longer needed.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>dst_pt_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to an integer which contains the size of the destination array.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>use_shared_key</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Specifies if shared key is to be used. See zkLockDataF2F.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="409" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="409" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>ECDSA</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a803174f6dbeba5d1e59d63bd127cc746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGenECDSASigFromDigest</definition>
                <argsstring>(zkCTX ctx, const uint8_t *digest, int slot, uint8_t **sig, int *sig_sz)</argsstring>
                <name>zkGenECDSASigFromDigest</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>digest</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>sig</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>sig_sz</declname>
                </param>
                <briefdescription>
                    <para>Generate a signature using the Zymkey's ECDSA private key. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>digest</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) This parameter contains the digest of the data that will be used to generate the signature.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to generate a signature from. This parameter is only valid for Zymkey models 4i and beyond.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>sig</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to a pointer to an array of unsigned bytes which contains the generated signature. This pointer is created by this function and must be freed by the application when no longer needed.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>sig_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to an integer which contains the size of the signature.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="440" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="440" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1ac2237d21c7963e18b9c43c272239f5f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGenECDSASigFromDigestWithRecID</definition>
                <argsstring>(zkCTX ctx, const uint8_t *digest, int slot, uint8_t **sig, int *sig_sz, uint8_t *recovery_id)</argsstring>
                <name>zkGenECDSASigFromDigestWithRecID</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>digest</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>sig</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>sig_sz</declname>
                </param>
                <param>
                    <type>uint8_t *</type>
                    <declname>recovery_id</declname>
                </param>
                <briefdescription>
                    <para>Generate a signature using the Zymkey's ECDSA private key. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>digest</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) This parameter contains the digest of the data that will be used to generate the signature.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to generate a signature from. This parameter is only valid for Zymkey models 4i and beyond.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>sig</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to a pointer to an array of unsigned bytes which contains the generated signature. This pointer is created by this function and must be freed by the application when no longer needed.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>sig_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to an integer which contains the size of the signature.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>recovery_id</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) Returns recovery id value needed for ethereum key recovery.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="466" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="466" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1af2fff1ad2dc2962c075d86e4c7f32910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkVerifyECDSASigFromDigest</definition>
                <argsstring>(zkCTX ctx, const uint8_t *digest, int pubkey_slot, const uint8_t *sig, int sig_sz)</argsstring>
                <name>zkVerifyECDSASigFromDigest</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>digest</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>pubkey_slot</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>sig</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>sig_sz</declname>
                </param>
                <briefdescription>
                    <para>Verify a signature using one of the Zymkey's public keys. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>Verify a signature using an internal public key from the Zymkey private/public key store.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>digest</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) This parameter contains the digest of the data that will be used to generate the signature.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pubkey_slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to generate a signature from. This parameter is only valid for Zymkey models 4i and beyond.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>sig</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Array of bytes which contains the signature.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>sig_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Size of signature.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for signature verification failed, 1 for signature verification passed, less than 0 for general failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="492" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="492" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1ac01a977ceac50cd7a4fb8ddb1672c7b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkVerifyECDSASigFromDigestWithForeignKeySlot</definition>
                <argsstring>(zkCTX ctx, const uint8_t *digest, int pubkey_slot, const uint8_t *sig, int sig_sz)</argsstring>
                <name>zkVerifyECDSASigFromDigestWithForeignKeySlot</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>digest</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>pubkey_slot</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>sig</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>sig_sz</declname>
                </param>
                <briefdescription>
                    <para>Verify a signature using one of the Zymkey's foreign public keys. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>Verify a signature using a public key from the Zymkey foreign key store.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>digest</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) This parameter contains the digest of the data that will be used to generate the signature.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pubkey_slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to generate a signature from. This parameter is only valid for Zymkey models 4i and beyond.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>sig</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Array of bytes which contains the signature.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>sig_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Size of signature.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for signature verification failed, 1 for signature verification passed, less than 0 for general failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="517" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="517" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>ECDH and KDF</header>
            <memberdef kind="function" id="zk__app__utils_8h_1adc168549885a25d8967e6f0537ea0253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkDoRawECDH</definition>
                <argsstring>(zkCTX ctx, int slot, const uint8_t *peer_pubkey, int peer_pubkey_sz, uint8_t **pre_master_secret)</argsstring>
                <name>zkDoRawECDH</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>peer_pubkey</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>peer_pubkey_sz</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>pre_master_secret</declname>
                </param>
                <briefdescription>
                    <para>Perform a raw ECDH operation. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>Perform an ECDH operation with no Key Derivation Function (KDF). The raw pre-master secret is returned in the response. The peer public key is presented in the call.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to use for the local key. If this parameter is -1, the ephemeral key is used.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>peer_pubkey</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The peer public key.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>peer_pubkey_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Size of the peer public key.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pre_master_secret</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) returned pointer to the pre-master secret</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for general failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="545" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="545" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1ac1222347f2bd12f688db3a5bbbb83f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkDoRawECDHWithIntPeerPubkey</definition>
                <argsstring>(zkCTX ctx, int slot, int peer_pubkey_slot, bool peer_pubkey_slot_is_foreign, uint8_t **pre_master_secret)</argsstring>
                <name>zkDoRawECDHWithIntPeerPubkey</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>peer_pubkey_slot</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>peer_pubkey_slot_is_foreign</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>pre_master_secret</declname>
                </param>
                <briefdescription>
                    <para>Perform a raw ECDH operation. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>Perform an ECDH operation with no Key Derivation Function (KDF). The raw pre-master secret is returned in the response. The peer public key is referenced from the zymkey internal key store.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to use for the local key. If this parameter is -1, the ephemeral key is used.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>peer_pubkey_slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The peer public key slot where the peer public key is to be found.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>peer_pubkey_slot_is_foreign</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) If true, the peer public key slot is found in the foreign public keyring.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pre_master_secret</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) returned pointer to the pre-master secret</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for general failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="571" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="571" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a772ea57e2db2aeab6d3e30e32c1af3b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkDoECDHAndKDF</definition>
                <argsstring>(zkCTX ctx, ZK_ECDH_KDF_TYPE kdf_type, int slot, const uint8_t *peer_pubkey, int peer_pubkey_sz, const uint8_t *salt, int salt_sz, const uint8_t *info, int info_sz, int num_iterations, int derived_key_sz, uint8_t **derived_key)</argsstring>
                <name>zkDoECDHAndKDF</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919e" kindref="member">ZK_ECDH_KDF_TYPE</ref>
                    </type>
                    <declname>kdf_type</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>peer_pubkey</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>peer_pubkey_sz</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>salt</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>salt_sz</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>info</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>info_sz</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>num_iterations</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>derived_key_sz</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>derived_key</declname>
                </param>
                <briefdescription>
                    <para>Perform an ECDH operation plus Key Derivation Function. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>Perform an ECDH operation with Key Derivation Function (KDF). The derived key is returned in the response. The peer public key is presented in the call.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to use for the local key. If this parameter is -1, the ephemeral key is used.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>peer_pubkey</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The peer public key.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>peer_pubkey_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Size of the peer public key.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>salt</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The salt to use for the selected KDF.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>salt_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The salt size. Must be less than or equal to 128 bytes.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>info</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The info field to use for RFC 5869. Ignored for PBKDF2.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>info_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The size of the info parameter. Must be less than or equal to 128 bytes.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>num_iterations</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Number of iterations to carry out (PBKDF only)</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>derived_key_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The desired number of bytes to return for the KDF. For RFC 5869, this value must be less than 8160 bytes (SHA256) or 16320 (SHA512).</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>derived_key</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) returned pointer to the derived key.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for general failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="610" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="610" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a38ce470571919d1fc26e877b4c1edc16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkDoECDHAndKDFWithIntPeerPubkey</definition>
                <argsstring>(zkCTX ctx, ZK_ECDH_KDF_TYPE kdf_type, int slot, int peer_pubkey_slot, bool peer_pubkey_slot_is_foreign, const uint8_t *salt, int salt_sz, const uint8_t *info, int info_sz, int num_iterations, int derived_key_sz, uint8_t **derived_key)</argsstring>
                <name>zkDoECDHAndKDFWithIntPeerPubkey</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919e" kindref="member">ZK_ECDH_KDF_TYPE</ref>
                    </type>
                    <declname>kdf_type</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>peer_pubkey_slot</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>peer_pubkey_slot_is_foreign</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>salt</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>salt_sz</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>info</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>info_sz</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>num_iterations</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>derived_key_sz</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>derived_key</declname>
                </param>
                <briefdescription>
                    <para>Perform an ECDH operation plus Key Derivation Function. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>Perform an ECDH operation with Key Derivation Function (KDF). The derived key is returned in the response. The peer public key is referenced from the zymkey internal key store.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to use for the local key. If this parameter is -1, the ephemeral key is used.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>peer_pubkey_slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The peer public key slot where the peer public key is to be found.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>peer_pubkey_slot_is_foreign</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) If true, the peer public key slot is found in the foreign public keyring.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>salt</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The salt to use for the selected KDF.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>salt_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The salt size. Must be less than or equal to 128 bytes.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>info</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The info field to use for RFC 5869. Ignored for PBKDF2.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>info_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The size of the info parameter. Must be less than or equal to 128 bytes.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>num_iterations</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Number of iterations to carry out (PBKDF only)</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>derived_key_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The desired number of bytes to return for the KDF. For RFC 5869, this value must be less than 8160 bytes (SHA256) or 16320 (SHA512).</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>derived_key</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) returned pointer to the derived key.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for general failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="658" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="658" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Key Management</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a2843e04c508eb3b242bf3ec2a10b90bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkSaveECDSAPubKey2File</definition>
                <argsstring>(zkCTX ctx, const char *filename, int slot)</argsstring>
                <name>zkSaveECDSAPubKey2File</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>filename</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <briefdescription>
                    <para>[DEPRECATED] Use zkExportPubKey2File. Store the public key to a host file in PEM format. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function is useful for generating Certificate Signing Requests (CSR).</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>filename</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Filename where PEM formatted public key is to be stored.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to retrieve. Only valid for model 4i and above.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="688" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="688" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a6446ab63ac57d94a77e5c6373ee24399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkExportPubKey2File</definition>
                <argsstring>(zkCTX ctx, const char *filename, int pubkey_slot, bool slot_is_foreign)</argsstring>
                <name>zkExportPubKey2File</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>filename</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>pubkey_slot</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>slot_is_foreign</declname>
                </param>
                <briefdescription>
                    <para>Store the public key to a host file in PEM format. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function is useful for generating Certificate Signing Requests (CSR).</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>filename</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Filename where PEM formatted public key is to be stored.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pubkey_slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to retrieve. Zymkey and HSM4 have slots 0, 1, and 2.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot_is_foreign</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) If true, designates the pubkey slot to come from the foreign keystore. (model &gt;= HSM6)</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="706" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="706" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a2c71f05a6b2b14d0440b9d3c81b41bfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetECDSAPubKey</definition>
                <argsstring>(zkCTX ctx, uint8_t **pk, int *pk_sz, int slot)</argsstring>
                <name>zkGetECDSAPubKey</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>pk</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>pk_sz</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <briefdescription>
                    <para>[DEPRECATED] Use zkExportPubKey. Gets the public key and stores in a byte array created by this function. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pk</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) Pointer to a pointer created by this function which contains the public key.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pk_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) Pointer to an integer which contains the size of the public key.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to retrieve. Only valid for model 4i and above.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="726" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="726" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a8f43ab1e3cfd0429a33f6e1292dced00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkExportPubKey</definition>
                <argsstring>(zkCTX ctx, uint8_t **pk, int *pk_sz, int pubkey_slot, bool slot_is_foreign)</argsstring>
                <name>zkExportPubKey</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>uint8_t **</type>
                    <declname>pk</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>pk_sz</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>pubkey_slot</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>slot_is_foreign</declname>
                </param>
                <briefdescription>
                    <para>Gets the public key and stores in a byte array created by this function. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pk</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) Pointer to a pointer created by this function which contains the public key.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pk_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) Pointer to an integer which contains the size of the public key.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pubkey_slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to retrieve. Zymkey and HSM4 have slots 0, 1, and 2.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot_is_foreign</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) If true, designates the pubkey slot to come from the foreign keystore (model &gt;= HSM6).</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="748" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="748" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1ac4f620af7fafbf32fd820f6db8861e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetAllocSlotsList</definition>
                <argsstring>(zkCTX ctx, bool is_foreign, int *max_num_keys, int **alloc_key_list, int *alloc_key_list_sz)</argsstring>
                <name>zkGetAllocSlotsList</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>is_foreign</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>max_num_keys</declname>
                </param>
                <param>
                    <type>int **</type>
                    <declname>alloc_key_list</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>alloc_key_list_sz</declname>
                </param>
                <briefdescription>
                    <para>Get the list of allocated keys (model &gt;= HSM6). </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function returns a list of all allocated key slots.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>is_foreign</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) if true, retrieve allocation list of the foreign keys</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>max_num_keys</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) retrieves the key pool size</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>alloc_key_list</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) a pointer to an array of integers provided by this function to the caller</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>alloc_key_list_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) a pointer to an integer which contains the size of the returned key list</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="771" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="771" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a558efd96315d7e1e7245e52cdfa0bd0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkStoreForeignPubKey</definition>
                <argsstring>(zkCTX ctx, ZK_EC_KEY_TYPE pk_type, uint8_t *pk, int pk_sz)</argsstring>
                <name>zkStoreForeignPubKey</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7" kindref="member">ZK_EC_KEY_TYPE</ref>
                    </type>
                    <declname>pk_type</declname>
                </param>
                <param>
                    <type>uint8_t *</type>
                    <declname>pk</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>pk_sz</declname>
                </param>
                <briefdescription>
                    <para>Store a new foreign public key in Zymkey. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function stores a new foreign public key in the Zymkey public key ring. This public key can be used for signature verification in use cases where it is desirable to hide the public key.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pk_type</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The type of the public key.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pk</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Pointer to the public key to store.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pk_sz</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The public key size.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>allocated slot number in foreign key store, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="793" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="793" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a156c256f416f2e5b466fe7379d64899b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkDisablePubKeyExport</definition>
                <argsstring>(zkCTX ctx, int pubkey_slot, bool slot_is_foreign)</argsstring>
                <name>zkDisablePubKeyExport</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>pubkey_slot</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>slot_is_foreign</declname>
                </param>
                <briefdescription>
                    <para>Prevent a public key from being exported to the host. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function prevents the public key at the specified slot from being exported to the host using the API zkExportPubKey.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pubkey_slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The key slot to disable pubkey export on.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot_is_foreign</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The slot parameter refers to a slot in the foreign keyring.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="810" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="810" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a7d440c70c23f8fe1144a4a95b2ada1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGenKeyPair</definition>
                <argsstring>(zkCTX ctx, ZK_EC_KEY_TYPE type)</argsstring>
                <name>zkGenKeyPair</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7" kindref="member">ZK_EC_KEY_TYPE</ref>
                    </type>
                    <declname>type</declname>
                </param>
                <briefdescription>
                    <para>Generate a new persistent key pair. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function generates a new key pair of the specified type and store it persistently. This key pair cannot be used as part of the zymkey's digital wallet operations.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>type</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The type of key to generate (ZK_EC_KEY_TYPE).</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>allocated slot number if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="825" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="825" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1ab97b544f292dae99810a4d2128a0ba53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGenEphemeralKeyPair</definition>
                <argsstring>(zkCTX ctx, ZK_EC_KEY_TYPE type)</argsstring>
                <name>zkGenEphemeralKeyPair</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7" kindref="member">ZK_EC_KEY_TYPE</ref>
                    </type>
                    <declname>type</declname>
                </param>
                <briefdescription>
                    <para>Generate an ephemeral key pair. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function generates an ephemeral key pair of the specified type. Ephemeral key pairs are useful when performing ECDH for time-of-flight encryption. Only one ephemeral key slot is available and is not persistent between reboots.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>type</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The type of key to generate (ZK_EC_KEY_TYPE).</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="840" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="840" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a68c45329be1247878b4d0d9a690e2915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkRemoveKey</definition>
                <argsstring>(zkCTX ctx, int slot, bool slot_is_foreign)</argsstring>
                <name>zkRemoveKey</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>slot_is_foreign</declname>
                </param>
                <briefdescription>
                    <para>Remove a key pair or a foreign public key. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function deletes a key pair or a foreign public key from persistent storage.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The slot</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot_is_foreign</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The slot parameter refers to a slot in the foreign keyring.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="855" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="855" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a6d74d4a5fd5748dd90c30c372bf23e2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkInvalidateEphemeralKey</definition>
                <argsstring>(zkCTX ctx)</argsstring>
                <name>zkInvalidateEphemeralKey</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <briefdescription>
                    <para>Invalidate the ephemeral key. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function invalidates the ephemeral key.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="866" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="866" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Digital Wallet (BIP32/39/44)</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a67e79aa7b6e234155fc5c6982edeac1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGenWalletMasterSeed</definition>
                <argsstring>(zkCTX ctx, ZK_EC_KEY_TYPE type, const char *wallet_name, const uint8_t *master_generator_key, int master_generator_key_size, const char *bip39_passphrase, char **bip39_mnemonic)</argsstring>
                <name>zkGenWalletMasterSeed</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7" kindref="member">ZK_EC_KEY_TYPE</ref>
                    </type>
                    <declname>type</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>wallet_name</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>master_generator_key</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>master_generator_key_size</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>bip39_passphrase</declname>
                </param>
                <param>
                    <type>char **</type>
                    <declname>bip39_mnemonic</declname>
                </param>
                <briefdescription>
                    <para>Generate master seed to start a new blockchain wallet. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function generates a new blockchain master seed for creating a new wallet.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>type</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The type of key to generate (ZK_EC_KEY_TYPE).</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>wallet_name</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) An ASCII string which contains the name of the wallet.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>master_generator_key</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The master generator key used to help generate the master seed. Can be empty string.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>master_generator_key_size</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The size of the master generator key. If 0, no master generator key is used in the formulation of the master seed.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>bip39_passphrase</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The passphrase to generate a different bip39_mnemonic. Can be empty string.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>bip39_mnemonic</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to the bip39 mnemonic sentence. If NULL, the master seed is generated per BIP32. Otherwise, the master seed is generated per BIP39 and the mnemonic sentence is returned in this parameter. The string is null terminated and encoded in UTF-8 NFKD from the BIP39 Enlish dictionary.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>allocated slot number if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="900" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="900" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1aaab64bbea25d2d10f7f889ff24d0080b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGenWalletChildKey</definition>
                <argsstring>(zkCTX ctx, int parent_key_slot, uint32_t index, bool is_hardened)</argsstring>
                <name>zkGenWalletChildKey</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>parent_key_slot</declname>
                </param>
                <param>
                    <type>uint32_t</type>
                    <declname>index</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>is_hardened</declname>
                </param>
                <briefdescription>
                    <para>Generate child key from a parent key in a blockchain wallet . (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function generates a new child key descendent from a specified parent key in a wallet.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>parent_key_slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The parent key slot to base the child key derivation on.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>index</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The index of the child seed. This determines the node address as well as the outcome of the key generation.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>is_hardened</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) If true, a hardened key is generated.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>allocated slot number if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="924" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="924" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a65d4270afc5e528ed2efd5ed77172c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkRestoreWalletMasterSeedFromMnemonic</definition>
                <argsstring>(zkCTX ctx, ZK_EC_KEY_TYPE type, const char *wallet_name, const uint8_t *master_generator_key, int master_generator_key_size, const char *bip39_passphrase, char *bip39_mnemonic)</argsstring>
                <name>zkRestoreWalletMasterSeedFromMnemonic</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7" kindref="member">ZK_EC_KEY_TYPE</ref>
                    </type>
                    <declname>type</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>wallet_name</declname>
                </param>
                <param>
                    <type>const uint8_t *</type>
                    <declname>master_generator_key</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>master_generator_key_size</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>bip39_passphrase</declname>
                </param>
                <param>
                    <type>char *</type>
                    <declname>bip39_mnemonic</declname>
                </param>
                <briefdescription>
                    <para>Restore a master seed from a BIP39 mnemonic and a master generator key. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function restores a wallet master seed from a supplied BIP39 mnemonic string and a master generator key.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>type</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The type of key to generate (ZK_KEY_TYPE).</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>wallet_name</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) An ASCII string which contains the name of the wallet.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>master_generator_key</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The master generator key used to help generate the master seed.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>master_generator_key_size</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The size of the master generator key. If 0, no master generator key is used in the formulation of the master seed.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>bip39_passphrase</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The passphrase used to generate the bip39_mnemonic.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>bip39_mnemonic</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The bip39_mnemonic string, null terminated and UTF-8 NFKD encoded from the BIP39 English dictionary.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>allocated slot number if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="953" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="953" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a5d6c1880618a06e360fad5f3b6b554a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetWalletNodeAddrFromKeySlot</definition>
                <argsstring>(zkCTX ctx, int slot, char **node_addr, char **wallet_name, int *master_seed_slot)</argsstring>
                <name>zkGetWalletNodeAddrFromKeySlot</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>char **</type>
                    <declname>node_addr</declname>
                </param>
                <param>
                    <type>char **</type>
                    <declname>wallet_name</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>master_seed_slot</declname>
                </param>
                <briefdescription>
                    <para>Derive the node address from a key slot number. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function derives a node address from an input key slot number.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) A key slot number that is part of a digital wallet.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>node_addr</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to a pointer which will contain the node address in ASCII.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>wallet_name</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to a pointer which will contain the wallet name in ASCII. If NULL, this parameter will not be retrieved.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>master_seed_slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to an integer which will contain the master seed key slot. If NULL, this parameter will not be retrieved.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="979" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="979" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1ab8d71adf4a175f319cc56ce83fc745d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetWalletKeySlotFromNodeAddr</definition>
                <argsstring>(zkCTX ctx, const char *node_addr, const char *wallet_name, int master_seed_slot, int *slot)</argsstring>
                <name>zkGetWalletKeySlotFromNodeAddr</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>node_addr</declname>
                </param>
                <param>
                    <type>const char *</type>
                    <declname>wallet_name</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>master_seed_slot</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>slot</declname>
                </param>
                <briefdescription>
                    <para>Derive the slot address from a node address. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function returns the slot number associated with a given node address.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>node_addr</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) A pointer which contains the node address in ASCII.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>wallet_name</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) A pointer which contains the wallet name in ASCII, used to identify the wallet identity. If desired, this parameter can be NULL and the master_seed_slot parameter can be specified instead.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>master_seed_slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The master seed slot. Can be used to specify the wallet identity instead of the wallet name.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>slot</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A pointer to an integer which contains the associated key slot.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1006" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1006" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Perimeter Detect</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a099e0f45cd4ddeaddc9089ee1ee4618f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkSetPerimeterEventAction</definition>
                <argsstring>(zkCTX ctx, int channel, uint32_t action_flags)</argsstring>
                <name>zkSetPerimeterEventAction</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>channel</declname>
                </param>
                <param>
                    <type>uint32_t</type>
                    <declname>action_flags</declname>
                </param>
                <briefdescription>
                    <para>Set perimeter breach action. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function specifies the action to take when a perimeter breach event occurs. The possible actions are any combination of:</p>
                        <ul>
                            <li>Notify host</li>
                            <p>Notify host</p>
                            <li>Zymkey self-destruct</li>
                            <p>Zymkey self-destruct</p>
                        </ul>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>channel</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The channel (0 or 1) that the action flags will be applied to.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>action_flags</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The actions to apply to the perimeter event channel:</p>
                                <ul>
                                    <li>Notify (ZK_PERIMETER_EVENT_ACTION_NOTIFY)</li>
                                    <p>Notify (ZK_PERIMETER_EVENT_ACTION_NOTIFY)</p>
                                    <li>Self-destruct (ZK_PERIMETER_EVENT_ACTION_SELF_DESTRUCT)</li>
                                    <p>Self-destruct (ZK_PERIMETER_EVENT_ACTION_SELF_DESTRUCT)</p>
                                </ul>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1031" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1031" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1af3e8e23e3a8cdbf5ec95f115fb154915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkSetDigitalPerimeterDetectLPPeriod</definition>
                <argsstring>(zkCTX ctx, int lp_period)</argsstring>
                <name>zkSetDigitalPerimeterDetectLPPeriod</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>lp_period</declname>
                </param>
                <briefdescription>
                    <para>Set the low power period (model &gt;= HSM6). </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function sets low power period on the digital perimeter detect</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>lp_period</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) low power period in microseconds</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1042" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1042" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a6e29752c07d3f08810b1ef78162e00d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkSetDigitalPerimeterDetectLPMaxBits</definition>
                <argsstring>(zkCTX ctx, int max_num_bits)</argsstring>
                <name>zkSetDigitalPerimeterDetectLPMaxBits</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>max_num_bits</declname>
                </param>
                <briefdescription>
                    <para>Set the low power max number of bits (model &gt;= HSM6). </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function sets low power max number of bits on the digital perimeter detect</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>max_num_bits</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) max number of bits</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1054" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1054" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a32d0c0a1960f271c4c37b173fd6f6fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkSetDigitalPerimeterDetectDelays</definition>
                <argsstring>(zkCTX ctx, int min_delay_ns, int max_delay_ns)</argsstring>
                <name>zkSetDigitalPerimeterDetectDelays</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>min_delay_ns</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>max_delay_ns</declname>
                </param>
                <briefdescription>
                    <para>Set the delays (model &gt;= HSM6). </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function sets delays on the digital perimeter detect</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>min_delay_ns</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) minimum delay in nanoseconds</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>max_delay_ns</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) maximum delay in nanoseconds</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1068" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1068" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a8ee9b92164a922565327aae70ea12578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkWaitForPerimeterEvent</definition>
                <argsstring>(zkCTX ctx, uint32_t timeout_ms)</argsstring>
                <name>zkWaitForPerimeterEvent</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>uint32_t</type>
                    <declname>timeout_ms</declname>
                </param>
                <briefdescription>
                    <para>Wait for a perimeter breach event to be detected. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function is called in order to wait for a perimeter breach event to occur. This function blocks the calling thread unless called with a timeout of zero. Note that, in order to receive perimeter events, the zymkey must have been configured to notify the host on either or both of the perimeter detect channels via a call to "zkSetPerimeterEventAction".</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>timeout_ms</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The maximum amount of time in milliseconds to wait for a perimeter event to arrive.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure, -ETIMEDOUT when no perimeter events detected within the specified timeout</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1085" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1085" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1ac21dfdb0c57067772fe45c6481551029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetPerimeterDetectInfo</definition>
                <argsstring>(zkCTX ctx, uint32_t **timestamps_sec, int *num_timestamps)</argsstring>
                <name>zkGetPerimeterDetectInfo</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>uint32_t **</type>
                    <declname>timestamps_sec</declname>
                </param>
                <param>
                    <type>int *</type>
                    <declname>num_timestamps</declname>
                </param>
                <briefdescription>
                    <para>Get current perimeter detect info. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function gets the timestamp of the first perimeter detect event for the given channel</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>timestamps_sec</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) The timestamps for when any breach occurred. The index in this array corresponds to the channel number used by zkSetPerimeterEventAction. A 0 value means no breach has occurred on this channel. This array is allocated by this routine and so it must be freed by the caller.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>num_timestamps</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) The number of timestamps in the returned array</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1100" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1100" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1aaba47000d3349d6278c4e0389f3be92d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkClearPerimeterDetectEvents</definition>
                <argsstring>(zkCTX ctx)</argsstring>
                <name>zkClearPerimeterDetectEvents</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <briefdescription>
                    <para>Clear perimeter detect events. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function clears all perimeter detect event info and rearms all perimeter detect channels</p>
                    </simplesect>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1108" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1108" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>LED Control</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a0a8056c9a978f68358a6c30e32a0554a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkLEDOff</definition>
                <argsstring>(zkCTX ctx)</argsstring>
                <name>zkLEDOff</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <briefdescription>
                    <para>Turns the LED off. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1121" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1121" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a95b9136c02dd481c3c5da5835e47dc4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkLEDOn</definition>
                <argsstring>(zkCTX ctx)</argsstring>
                <name>zkLEDOn</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <briefdescription>
                    <para>Turns the LED on. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1129" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1129" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a83ef549eec6c821909be6a542995ebca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkLEDFlash</definition>
                <argsstring>(zkCTX ctx, uint32_t on_ms, uint32_t off_ms, uint32_t num_flashes)</argsstring>
                <name>zkLEDFlash</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>uint32_t</type>
                    <declname>on_ms</declname>
                </param>
                <param>
                    <type>uint32_t</type>
                    <declname>off_ms</declname>
                </param>
                <param>
                    <type>uint32_t</type>
                    <declname>num_flashes</declname>
                </param>
                <briefdescription>
                    <para>Flashes the LED. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>on_ms</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The amount of time, in milliseconds, that the LED will stay on during a flash cycle.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>off_ms</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The amount of time, in milliseconds, that the LED will stay off during a flash cycle.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>num_flashes</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The number of on/off flash cycles to complete. If this parameter is 0, then the LED will flash indefinitely.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1146" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1146" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Administrative Ops</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a17a243ae1bf977c5357aae425c0613a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkSetI2CAddr</definition>
                <argsstring>(zkCTX ctx, int addr)</argsstring>
                <name>zkSetI2CAddr</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>addr</declname>
                </param>
                <briefdescription>
                    <para>Sets the i2c address of the Zymkey (i2c versions only) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This method should be called if the i2c address of the Zymkey is shared with another i2c device on the same i2c bus. The default i2c address for Zymkey units is 0x30. Currently, the address may be set in the ranges of 0x30 - 0x37 and 0x60 - 0x67. After successful completion of this command, the Zymkey will reset itself.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>addr</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The i2c address that the Zymkey will set itself to.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1169" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1169" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Time</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a4bcc349ef785502a3e5eabdc33629181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetTime</definition>
                <argsstring>(zkCTX ctx, uint32_t *epoch_time_sec, bool precise_time)</argsstring>
                <name>zkGetTime</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>uint32_t *</type>
                    <declname>epoch_time_sec</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>precise_time</declname>
                </param>
                <briefdescription>
                    <para>Get current GMT time. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function is called to get the time directly from a Zymkey's Real Time Clock (RTC)</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>epoch_time_sec</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) The time in seconds from the epoch (Jan. 1, 1970).</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>precise_time</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) If true, this API returns the time after the next second falls. This means that the caller could be blocked up to one second. If false, the API returns immediately with the current time reading.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1187" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1187" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Accelerometer</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a4f378947ae177504717b050ee892c48f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkSetTapSensitivity</definition>
                <argsstring>(zkCTX ctx, int axis, float pct)</argsstring>
                <name>zkSetTapSensitivity</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>axis</declname>
                </param>
                <param>
                    <type>float</type>
                    <declname>pct</declname>
                </param>
                <briefdescription>
                    <para>Sets the sensitivity of tap operations. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This method permits setting the sensitivity of the tap detection feature. Each axis may be individually configured or all at once.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>axis</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The axis to configure. This parameter should contain one of the values in the enum typedef ACCEL_AXIS_TYPE.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>pct</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The sensitivity expressed as percentage.</p>
                                <ol>
                                    <li>0% = Shut down: Tap detection should not occur along the axis.</li>
                                    <p>0% = Shut down: Tap detection should not occur along the axis.</p>
                                    <li>100% = Maximum sensitivity.</li>
                                    <p>100% = Maximum sensitivity.</p>
                                </ol>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1209" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1209" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a59be1e5f44001cfe4dbaac2a77bbab4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkWaitForTap</definition>
                <argsstring>(zkCTX ctx, uint32_t timeout_ms)</argsstring>
                <name>zkWaitForTap</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>uint32_t</type>
                    <declname>timeout_ms</declname>
                </param>
                <briefdescription>
                    <para>Wait for a tap event to be detected. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function is called in order to wait for a tap event to occur. This function blocks the calling thread unless called with a timeout of zero.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>timeout_ms</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The maximum amount of time in milliseconds to wait for a tap event to arrive.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure, -ETIMEDOUT when no tap events detected within the specified timeout</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1222" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1222" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1aafb16259abbab1dc1a65c0efa54d5a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetAccelerometerData</definition>
                <argsstring>(zkCTX ctx, zkAccelAxisDataType *x, zkAccelAxisDataType *y, zkAccelAxisDataType *z)</argsstring>
                <name>zkGetAccelerometerData</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>
                        <ref refid="structzk_accel_axis_data_type" kindref="compound">zkAccelAxisDataType</ref> *</type>
                    <declname>x</declname>
                </param>
                <param>
                    <type>
                        <ref refid="structzk_accel_axis_data_type" kindref="compound">zkAccelAxisDataType</ref> *</type>
                    <declname>y</declname>
                </param>
                <param>
                    <type>
                        <ref refid="structzk_accel_axis_data_type" kindref="compound">zkAccelAxisDataType</ref> *</type>
                    <declname>z</declname>
                </param>
                <briefdescription>
                    <para>Get current accelerometer data and tap info. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function gets the most recent accelerometer data in units of g forces plus the tap direction per axis.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>x</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) x axis accelerometer information y (output) y axis accelerometer information z (output) z axis accelerometer information</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1236" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1236" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Binding Management</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a34dcd3e4579174085cc753e7148bc3e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkLockBinding</definition>
                <argsstring>(zkCTX ctx)</argsstring>
                <name>zkLockBinding</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <briefdescription>
                    <para>Set soft binding lock. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function locks the binding for a specific HSM. This API is only valid for HSM series products.</p>
                    </simplesect>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1249" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1249" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a9c1ac0054642eb48f4d9b604e1fb0ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetCurrentBindingInfo</definition>
                <argsstring>(zkCTX ctx, bool *binding_is_locked, bool *is_bound)</argsstring>
                <name>zkGetCurrentBindingInfo</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>bool *</type>
                    <declname>binding_is_locked</declname>
                </param>
                <param>
                    <type>bool *</type>
                    <declname>is_bound</declname>
                </param>
                <briefdescription>
                    <para>Get current binding info. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function gets the current binding lock state as well as the current binding state. This API is only valid for devices in the HSM family.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>binding_is_locked</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) Binary value which expresses the current binding lock state. is_bound (output) Binary value which expresses the current bind state.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1262" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1262" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Module Info</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a96ef2502bb9c17c1884cd8e5a481ec55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetModelNumberString</definition>
                <argsstring>(zkCTX ctx, char **model_str)</argsstring>
                <name>zkGetModelNumberString</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>char **</type>
                    <declname>model_str</declname>
                </param>
                <briefdescription>
                    <para>Get Zymkey model number. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function retrieves the model number of the zymkey referred to in a specified context</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context which was created with zkOpen</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>model_str</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A double pointer to the model string. This function allocates this string. It is the caller's responsibility to free it.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1279" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1279" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a277fddb2c0abff8b8b2e532b46481fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetFirmwareVersionString</definition>
                <argsstring>(zkCTX ctx, char **fw_ver_str)</argsstring>
                <name>zkGetFirmwareVersionString</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>char **</type>
                    <declname>fw_ver_str</declname>
                </param>
                <briefdescription>
                    <para>Get Zymkey firmware version. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function retrieves the firmware version number of the zymkey referred to in a specified context</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context which was created with zkOpen</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>version_str</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A double pointer to the firmware version string. This function allocates this string. It is the caller's responsibility to free it.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1293" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1293" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a2de34f6c567cf67e908d6aafce53b323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetSerialNumberString</definition>
                <argsstring>(zkCTX ctx, char **serial_num_str)</argsstring>
                <name>zkGetSerialNumberString</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>char **</type>
                    <declname>serial_num_str</declname>
                </param>
                <briefdescription>
                    <para>Get Zymkey serial number. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function retrieves the serial number of the zymkey referred to in a specified context</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context which was created with zkOpen</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>serial_num_str</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) A double pointer to the serial number string. This function allocates this string. It is the caller's responsibility to free it.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1307" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1307" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a2e463f92b62c58b0ffb3d036998de8cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetCPUTemp</definition>
                <argsstring>(zkCTX ctx, float *cpu_temp)</argsstring>
                <name>zkGetCPUTemp</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>float *</type>
                    <declname>cpu_temp</declname>
                </param>
                <briefdescription>
                    <para>Get current HSM CPU temperature. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function gets the current HSM CPU temp.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>cpu_temp</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) The temperature in celsius of the CPU.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1316" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1316" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a4fb1581bda04b621f56af043173159f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetRTCDrift</definition>
                <argsstring>(zkCTX ctx, float *rtc_drift)</argsstring>
                <name>zkGetRTCDrift</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>float *</type>
                    <declname>rtc_drift</declname>
                </param>
                <briefdescription>
                    <para>Get current RTC drift. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function is called to get the current RTC drift.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>rtc_drift</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) The RTC drift.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1325" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1325" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a9c2d7b0c22146f89ba04ccc7df38052b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkGetBatteryVoltage</definition>
                <argsstring>(zkCTX ctx, float *batt_voltage)</argsstring>
                <name>zkGetBatteryVoltage</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>float *</type>
                    <declname>batt_voltage</declname>
                </param>
                <briefdescription>
                    <para>Get the battery voltage (model &gt;= HSM6). </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function gets the current battery voltage</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>ctx</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) Zymkey context.</p>
                            </parameterdescription>
                        </parameteritem>
                        <parameteritem>
                            <parameternamelist>
                                <parametername>battV</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(output) The current battery voltage value</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 if successful, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1336" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1336" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Battery Voltage Monitor</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a004db48c634667dab0d53c745aa36266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkSetBatteryVoltageAction</definition>
                <argsstring>(zkCTX ctx, int action)</argsstring>
                <name>zkSetBatteryVoltageAction</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>action</declname>
                </param>
                <briefdescription>
                    <para>Set battery voltage threshold action. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function specifies the action to take when the battery voltage falls below the threshold set by zkSetBatteryVoltageThreshold. If this function is never called, do nothing is default. There are three actions:</p>
                        <ul>
                            <li>Do nothing</li>
                            <p>Do nothing</p>
                            <li>Go to sleep until battery is replaced</li>
                            <p>Go to sleep until battery is replaced</p>
                            <li>Self-destruct</li>
                            <p>Self-destruct</p>
                        </ul>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>action</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The action to apply, specify one of the ZK_THRESHOLD_ACTION_TYPE:</p>
                                <ul>
                                    <li>Do nothing (ZK_ACTION_NONE)</li>
                                    <p>Do nothing (ZK_ACTION_NONE)</p>
                                    <li>Sleep (ZK_ACTION_SLEEP)</li>
                                    <p>Sleep (ZK_ACTION_SLEEP)</p>
                                    <li>Self-destruct (ZK_ACTION_SELF_DESTRUCT)</li>
                                    <p>Self-destruct (ZK_ACTION_SELF_DESTRUCT)</p>
                                </ul>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1364" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1364" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a85d7e20bba98c94d2bd92b1f8dfc68c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkSetBatteryVoltageThreshold</definition>
                <argsstring>(zkCTX ctx, float threshold)</argsstring>
                <name>zkSetBatteryVoltageThreshold</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>float</type>
                    <declname>threshold</declname>
                </param>
                <briefdescription>
                    <para>Sets the battery voltage threshold. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function sets the threshold at which if the battery voltage falls bellow, the action set by zkSetBatteryVoltageAction will be carried out. The recommended threshold is 2.3V. If this function isn't called 2.3V is assumed by default. Threshold must be below 2.5V.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>threshold</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The threshold in Volts.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1379" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1379" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>CPU Temperature Monitor</header>
            <memberdef kind="function" id="zk__app__utils_8h_1a9e7e23bdb88149047344b1522f62a627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkSetCPUTempAction</definition>
                <argsstring>(zkCTX ctx, int action)</argsstring>
                <name>zkSetCPUTempAction</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>action</declname>
                </param>
                <briefdescription>
                    <para>Set HSM CPU temperature threshold action. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function specifies the action to take when the HSM CPU temperature falls below the threshold set by zkSetCPULowTempThreshold, or rises above the threshold set by zkSetCPUHighTempThreshold. There are two actions to apply:</p>
                        <ul>
                            <li>Do nothing</li>
                            <p>Do nothing</p>
                            <li>Self-destruct</li>
                            <p>Self-destruct</p>
                        </ul>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>action</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The action to apply, used it's named constant from ZK_THRESHOLD_ACTION_TYPE:</p>
                                <ul>
                                    <li>Do nothing (ZK_ACTION_NONE)</li>
                                    <p>Do nothing (ZK_ACTION_NONE)</p>
                                    <li>Self-destruct (ZK_ACTION_SELF_DESTRUCT)</li>
                                    <p>Self-destruct (ZK_ACTION_SELF_DESTRUCT)</p>
                                </ul>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1403" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1403" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a0bf795c9bed846f2d87855816e70c114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkSetCPULowTempThreshold</definition>
                <argsstring>(zkCTX ctx, float threshold)</argsstring>
                <name>zkSetCPULowTempThreshold</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>float</type>
                    <declname>threshold</declname>
                </param>
                <briefdescription>
                    <para>Sets the HSM CPU low temperature threshold. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function sets the threshold at which if the on-board HSM CPU's tempreature falls below, the action set by zkSetCPUTempAction will be carried out. WARNING: You can lock yourself out in dev mode if you set a threshold above the CPU's ambient temperature. The recommended setting is no more than 20C. If no threshold is set, -10 degrees celsius is set as default.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>threshold</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The threshold in celsius.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1420" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1420" declcolumn="5"/>
            </memberdef>
            <memberdef kind="function" id="zk__app__utils_8h_1a26fab5ddba18b8d79feebcebe8583e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkSetCPUHighTempThreshold</definition>
                <argsstring>(zkCTX ctx, float threshold)</argsstring>
                <name>zkSetCPUHighTempThreshold</name>
                <param>
                    <type>
                        <ref refid="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" kindref="member">zkCTX</ref>
                    </type>
                    <declname>ctx</declname>
                </param>
                <param>
                    <type>float</type>
                    <declname>threshold</declname>
                </param>
                <briefdescription>
                    <para>Sets the HSM CPU high temperature threshold. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description">
                        <p>This function sets the threshold at which if the on-board HSM CPU's tempreature rises above, the action set by zkSetCPUTempAction will be carried out. WARNING: You can lock yourself out in dev mode if you set a threshold below the CPU's ambient temperature. The recommended setting is no less than 40C. If no threshold is set, 65 degrees celsius is set as default.</p>
                    </simplesect>
                    <parameterlist kind="param">
                        <parameteritem>
                            <parameternamelist>
                                <parametername>threshold</parametername>
                            </parameternamelist>
                            <parameterdescription>
                                <p>(input) The threshold in celsius.</p>
                            </parameterdescription>
                        </parameteritem>
                    </parameterlist>
                    <simplesect kind="return">
                        <p>0 for success, less than 0 for failure.</p>
                    </simplesect>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="1436" column="5" declfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" declline="1436" declcolumn="5"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="define">
            <memberdef kind="define" id="zk__app__utils_8h_1a483ab601bc65411778a8573de194ca28" prot="public" static="no">
                <name>ZK_PERIMETER_EVENT_ACTION_NOTIFY</name>
                <initializer>(1 &lt;&lt; 0)</initializer>
                <briefdescription>
                    <para>Perimeter breach action flag definitions. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="109" column="9" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" bodystart="109" bodyend="-1"/>
            </memberdef>
            <memberdef kind="define" id="zk__app__utils_8h_1aeb46102a3b07a7dbc1938c2e64a3bc56" prot="public" static="no">
                <name>ZK_PERIMETER_EVENT_ACTION_SELF_DESTRUCT</name>
                <initializer>(1 &lt;&lt; 1)</initializer>
                <briefdescription/>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="110" column="9" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" bodystart="110" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="enum">
            <memberdef kind="enum" id="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7" prot="public" static="no" strong="no">
                <type/>
                <name>ZK_EC_KEY_TYPE</name>
                <enumvalue id="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7a4b1eb00eb760cf6137262448dd924f66" prot="public">
                    <name>ZK_NISTP256</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7a5bfe43be8b3a4df1be2416e607b99bf4" prot="public">
                    <name>ZK_SECP256R1</name>
                    <initializer>= ZK_NISTP256</initializer>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7ae9bdfaebeae5590ee19daa5757d216d6" prot="public">
                    <name>ZK_SECP256K1</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7a50189ff9b487f7ee252b388cd94b8dfe" prot="public">
                    <name>ZK_ED25519</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7aceece18a02ba729b3228e80612ba5071" prot="public">
                    <name>ZK_X25519</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                    <para>Supported key types. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="40" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" bodystart="41" bodyend="47"/>
            </memberdef>
            <memberdef kind="enum" id="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37" prot="public" static="no" strong="no">
                <type/>
                <name>ZK_RECOVERY_STRATEGY</name>
                <enumvalue id="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37a9a5cb3541dbc9c3e8ec1ab533692a2df" prot="public">
                    <name>ZK_NONE</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37abe88645b7c251045104741f9d1bee746" prot="public">
                    <name>ZK_BIP39</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37a93fb347979912444469b25b790daa789" prot="public">
                    <name>ZK_SLIP39</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                    <para>Supported recovery strategies. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="52" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" bodystart="53" bodyend="57"/>
            </memberdef>
            <memberdef kind="enum" id="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919e" prot="public" static="no" strong="no">
                <type/>
                <name>ZK_ECDH_KDF_TYPE</name>
                <enumvalue id="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919ea5c03f868fbfae1cabab5b843f5fce3db" prot="public">
                    <name>ZK_KDF_RFC5869_SHA256</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919ea7eef6f090fa056c47366d3c887c72d80" prot="public">
                    <name>ZK_KDF_RFC5869_SHA512</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919ea6218c948cfbd3276da30a47eac4c483f" prot="public">
                    <name>ZK_KDF_PBKDF2_SHA256</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919ea0e80147f1a0b2f3256b6dd23809885d2" prot="public">
                    <name>ZK_KDF_PBKDF2_SHA512</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                    <para>Supported ECDH key derivation function types. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="62" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" bodystart="63" bodyend="68"/>
            </memberdef>
            <memberdef kind="enum" id="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61" prot="public" static="no" strong="no">
                <type/>
                <name>ZK_ACCEL_AXIS_TYPE</name>
                <enumvalue id="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61a059eeb9df0335701c7049e9cb75ed0da" prot="public">
                    <name>ZK_ACCEL_AXIS_X</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61adb91693f4203922414d4c8190667c999" prot="public">
                    <name>ZK_ACCEL_AXIS_Y</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61a25d262bab2dfd6ce743e06d49cc5b617" prot="public">
                    <name>ZK_ACCEL_AXIS_Z</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61a467e1c997db20ac4d04c81cd1ab92b0d" prot="public">
                    <name>ZK_ACCEL_AXIS_ALL</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                    <para>Accelerometer axis enum, used to set tap sensitivity. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="73" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" bodystart="74" bodyend="79"/>
            </memberdef>
            <memberdef kind="enum" id="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5" prot="public" static="no" strong="no">
                <type/>
                <name>ZK_THRESHOLD_ACTION_TYPE</name>
                <enumvalue id="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5adbd51f81cd5f9e013a0024ec505ce737" prot="public">
                    <name>ZK_ACTION_NONE</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5a56e327600bf958958912d1788ce84842" prot="public">
                    <name>ZK_ACTION_SELF_DESTRUCT</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <enumvalue id="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5a5079d5b11b4d84929cf5fa7861f42326" prot="public">
                    <name>ZK_ACTION_SLEEP</name>
                    <briefdescription/>
                    <detaileddescription>
                        <simplesect kind="description"/>
                    </detaileddescription>
                </enumvalue>
                <briefdescription>
                    <para>Possible actions for threshold monitor functions. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="84" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" bodystart="85" bodyend="89"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="typedef">
            <memberdef kind="typedef" id="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" prot="public" static="no">
                <type>void *</type>
                <definition>typedef void* zkCTX</definition>
                <argsstring/>
                <name>zkCTX</name>
                <briefdescription/>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="35" column="14" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" bodystart="35" bodyend="-1"/>
            </memberdef>
            <memberdef kind="typedef" id="zk__app__utils_8h_1adc6fcaf09ce1ebf1bc28e7cd9d11154c" prot="public" static="no">
                <type>enum <ref refid="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7" kindref="member">ZK_EC_KEY_TYPE</ref>
                </type>
                <definition>typedef enum ZK_EC_KEY_TYPE ZK_EC_KEY_TYPE</definition>
                <argsstring/>
                <name>ZK_EC_KEY_TYPE</name>
                <briefdescription>
                    <para>Supported key types. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="47" column="16"/>
            </memberdef>
            <memberdef kind="typedef" id="zk__app__utils_8h_1a9ad878b5a824b0a58005025d60f078b5" prot="public" static="no">
                <type>enum <ref refid="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37" kindref="member">ZK_RECOVERY_STRATEGY</ref>
                </type>
                <definition>typedef enum ZK_RECOVERY_STRATEGY ZK_RECOVERY_STRATEGY</definition>
                <argsstring/>
                <name>ZK_RECOVERY_STRATEGY</name>
                <briefdescription>
                    <para>Supported recovery strategies. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="57" column="22"/>
            </memberdef>
            <memberdef kind="typedef" id="zk__app__utils_8h_1a373f0a7fd3cdb75ff3944219af363d6d" prot="public" static="no">
                <type>enum <ref refid="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919e" kindref="member">ZK_ECDH_KDF_TYPE</ref>
                </type>
                <definition>typedef enum ZK_ECDH_KDF_TYPE ZK_ECDH_KDF_TYPE</definition>
                <argsstring/>
                <name>ZK_ECDH_KDF_TYPE</name>
                <briefdescription>
                    <para>Supported ECDH key derivation function types. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="68" column="18"/>
            </memberdef>
            <memberdef kind="typedef" id="zk__app__utils_8h_1a71457a7f4cc58c17b1502bda69978bc2" prot="public" static="no">
                <type>enum <ref refid="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61" kindref="member">ZK_ACCEL_AXIS_TYPE</ref>
                </type>
                <definition>typedef enum ZK_ACCEL_AXIS_TYPE ZK_ACCEL_AXIS_TYPE</definition>
                <argsstring/>
                <name>ZK_ACCEL_AXIS_TYPE</name>
                <briefdescription>
                    <para>Accelerometer axis enum, used to set tap sensitivity. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="79" column="20"/>
            </memberdef>
            <memberdef kind="typedef" id="zk__app__utils_8h_1a523cd900e7fbeb25cb9557790c28a9be" prot="public" static="no">
                <type>enum <ref refid="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5" kindref="member">ZK_THRESHOLD_ACTION_TYPE</ref>
                </type>
                <definition>typedef enum ZK_THRESHOLD_ACTION_TYPE ZK_THRESHOLD_ACTION_TYPE</definition>
                <argsstring/>
                <name>ZK_THRESHOLD_ACTION_TYPE</name>
                <briefdescription>
                    <para>Possible actions for threshold monitor functions. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="89" column="26"/>
            </memberdef>
            <memberdef kind="typedef" id="zk__app__utils_8h_1a45d7e3232790f86c9282b91cb0a292af" prot="public" static="no">
                <type>struct <ref refid="structzk_accel_axis_data_type" kindref="compound">zkAccelAxisDataType</ref>
                </type>
                <definition>typedef struct zkAccelAxisDataType zkAccelAxisDataType</definition>
                <argsstring/>
                <name>zkAccelAxisDataType</name>
                <briefdescription>
                    <para>zkGetAccelerometer data output. </para>
                </briefdescription>
                <detaileddescription>
                    <simplesect kind="description"/>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h" line="104" column="21"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>C interface to Zymkey Application Utilities Library. </para>
        </briefdescription>
        <detaileddescription>
            <simplesect kind="description">
                <p>
                    <simplesect kind="author">
                        <p>Scott Miller</p>
                    </simplesect>
                    <simplesect kind="version">
                        <p>1.0</p>
                    </simplesect>
                    <simplesect kind="date">
                        <p>November 17, 2016</p>
                    </simplesect>
                    <simplesect kind="copyright">
                        <p>Zymbit, Inc.</p>
                    </simplesect>
This file contains the C API to the the Zymkey Application Utilities library. This API facilitates writing user space applications which use Zymkey to perform cryptographic operations, such as:</p>
                <ol>
                    <li>Signing of payloads using ECDSA</li>
                    <p>Signing of payloads using ECDSA</p>
                    <li>Verification of payloads that were signed using Zymkey</li>
                    <p>Verification of payloads that were signed using Zymkey</p>
                    <li>Exporting the public key that matches Zymkey's private key</li>
                    <p>Exporting the public key that matches Zymkey's private key</p>
                    <li>"Locking" and "unlocking" data objects</li>
                    <p>"Locking" and "unlocking" data objects</p>
                    <li>Generating random data Additionally, there are functions for changing the i2c address (i2c units only), setting tap sensitivity and controlling the LED.</li>
                    <p>Generating random data Additionally, there are functions for changing the i2c address (i2c units only), setting tap sensitivity and controlling the LED.</p>
                </ol>
            </simplesect>
        </detaileddescription>
        <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/zk_app_utils.h"/>
    </compounddef>
</doxygen>

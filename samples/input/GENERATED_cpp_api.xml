<doxygen version="1.9.1" xml:lang="en-US">
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structzk_app_utils_1_1accel_data" kind="struct" language="C++" prot="public">
        <compoundname>zkAppUtils::accelData</compoundname>
        <includes refid="zk_app_utils_class_8h" local="no">zkAppUtilsClass.h</includes>
        <sectiondef kind="public-attrib">
            <memberdef kind="variable" id="structzk_app_utils_1_1accel_data_1ade088cb17d564e9ab8de27df8e529b53" prot="public" static="no" mutable="no">
                <type>double</type>
                <definition>double zkAppUtils::accelData::x</definition>
                <argsstring/>
                <name>x</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="140" column="12" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="140" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="structzk_app_utils_1_1accel_data_1a523ccaa6bbe89ac2e2e7ccd6ed56ba92" prot="public" static="no" mutable="no">
                <type>double</type>
                <definition>double zkAppUtils::accelData::y</definition>
                <argsstring/>
                <name>y</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="141" column="12" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="141" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="structzk_app_utils_1_1accel_data_1a5080fb3abbdeeac3b6b99bbeab84d2af" prot="public" static="no" mutable="no">
                <type>double</type>
                <definition>double zkAppUtils::accelData::z</definition>
                <argsstring/>
                <name>z</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="142" column="12" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="142" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="structzk_app_utils_1_1accel_data_1acad0eacf3d403f2b9337223f915e7693" prot="public" static="no" mutable="no">
                <type>int</type>
                <definition>int zkAppUtils::accelData::tapDirX</definition>
                <argsstring/>
                <name>tapDirX</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="143" column="9" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="143" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="structzk_app_utils_1_1accel_data_1acee9fe0835114a7ee167ebe706dc807e" prot="public" static="no" mutable="no">
                <type>int</type>
                <definition>int zkAppUtils::accelData::tapDirY</definition>
                <argsstring/>
                <name>tapDirY</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="144" column="9" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="144" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="structzk_app_utils_1_1accel_data_1a411a716f8caae78a98ea4983d796779f" prot="public" static="no" mutable="no">
                <type>int</type>
                <definition>int zkAppUtils::accelData::tapDirZ</definition>
                <argsstring/>
                <name>tapDirZ</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="145" column="9" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="145" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>Structure typedef used for retrieval of accelerometer data. </para>
        </briefdescription>
        <detaileddescription/>
        <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="138" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="139" bodyend="146"/>
        <listofallmembers>
            <member refid="structzk_app_utils_1_1accel_data_1acad0eacf3d403f2b9337223f915e7693" prot="public" virt="non-virtual">
                <scope>zkAppUtils::accelData</scope>
                <name>tapDirX</name>
            </member>
            <member refid="structzk_app_utils_1_1accel_data_1acee9fe0835114a7ee167ebe706dc807e" prot="public" virt="non-virtual">
                <scope>zkAppUtils::accelData</scope>
                <name>tapDirY</name>
            </member>
            <member refid="structzk_app_utils_1_1accel_data_1a411a716f8caae78a98ea4983d796779f" prot="public" virt="non-virtual">
                <scope>zkAppUtils::accelData</scope>
                <name>tapDirZ</name>
            </member>
            <member refid="structzk_app_utils_1_1accel_data_1ade088cb17d564e9ab8de27df8e529b53" prot="public" virt="non-virtual">
                <scope>zkAppUtils::accelData</scope>
                <name>x</name>
            </member>
            <member refid="structzk_app_utils_1_1accel_data_1a523ccaa6bbe89ac2e2e7ccd6ed56ba92" prot="public" virt="non-virtual">
                <scope>zkAppUtils::accelData</scope>
                <name>y</name>
            </member>
            <member refid="structzk_app_utils_1_1accel_data_1a5080fb3abbdeeac3b6b99bbeab84d2af" prot="public" virt="non-virtual">
                <scope>zkAppUtils::accelData</scope>
                <name>z</name>
            </member>
        </listofallmembers>
    </compounddef>
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classzk_app_utils_1_1common_exception" kind="class" language="C++" prot="public">
        <compoundname>zkAppUtils::commonException</compoundname>
        <basecompoundref prot="public" virt="non-virtual">std::exception</basecompoundref>
        <includes refid="zk_app_utils_class_8h" local="no">zkAppUtilsClass.h</includes>
        <sectiondef kind="private-attrib">
            <memberdef kind="variable" id="classzk_app_utils_1_1common_exception_1a21e84e935b572a43cf47bb71e0a73c7c" prot="private" static="no" mutable="no">
                <type>std::string</type>
                <definition>std::string zkAppUtils::commonException::msg</definition>
                <argsstring/>
                <name>msg</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="55" column="21" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="55" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="public-func">
            <memberdef kind="function" id="classzk_app_utils_1_1common_exception_1a02a5816cccdcd19e719bb288080c0e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type/>
                <definition>zkAppUtils::commonException::commonException</definition>
                <argsstring>(std::string status)</argsstring>
                <name>commonException</name>
                <param>
                    <type>std::string</type>
                    <declname>status</declname>
                </param>
                <briefdescription>
                    <para>Constructor. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>status</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A string which described the verbose exception </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="42" column="9"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1common_exception_1a3c0053dca967e9c898837a8a1f949f28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
                <type/>
                <definition>virtual zkAppUtils::commonException::~commonException</definition>
                <argsstring>()</argsstring>
                <name>~commonException</name>
                <exceptions> throw ()</exceptions>
                <briefdescription>
                    <para>Destructor. </para>
                </briefdescription>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="46" column="17" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="46" bodyend="46"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1common_exception_1a91506a3f15bd559b94d9239a661390cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
                <type>const char *</type>
                <definition>const char* zkAppUtils::commonException::what</definition>
                <argsstring>() const</argsstring>
                <name>what</name>
                <exceptions> throw ()</exceptions>
                <briefdescription>
                    <para>Override of std::exception <ref refid="classzk_app_utils_1_1common_exception_1a91506a3f15bd559b94d9239a661390cb" kindref="member">what()</ref> method. </para>
                </briefdescription>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="50" column="20"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>Exception class derived from std::exception. </para>
        </briefdescription>
        <detaileddescription/>
        <inheritancegraph>
            <node id="2">
                <label>std::exception</label>
            </node>
            <node id="1">
                <label>zkAppUtils::commonException</label>
                <link refid="classzk_app_utils_1_1common_exception"/>
                <childnode refid="2" relation="public-inheritance"/>
            </node>
        </inheritancegraph>
        <collaborationgraph>
            <node id="2">
                <label>std::exception</label>
            </node>
            <node id="1">
                <label>zkAppUtils::commonException</label>
                <link refid="classzk_app_utils_1_1common_exception"/>
                <childnode refid="2" relation="public-inheritance"/>
            </node>
        </collaborationgraph>
        <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="35" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="36" bodyend="56"/>
        <listofallmembers>
            <member refid="classzk_app_utils_1_1common_exception_1a02a5816cccdcd19e719bb288080c0e82" prot="public" virt="non-virtual">
                <scope>zkAppUtils::commonException</scope>
                <name>commonException</name>
            </member>
            <member refid="classzk_app_utils_1_1common_exception_1a21e84e935b572a43cf47bb71e0a73c7c" prot="private" virt="non-virtual">
                <scope>zkAppUtils::commonException</scope>
                <name>msg</name>
            </member>
            <member refid="classzk_app_utils_1_1common_exception_1a91506a3f15bd559b94d9239a661390cb" prot="public" virt="non-virtual">
                <scope>zkAppUtils::commonException</scope>
                <name>what</name>
            </member>
            <member refid="classzk_app_utils_1_1common_exception_1a3c0053dca967e9c898837a8a1f949f28" prot="public" virt="virtual">
                <scope>zkAppUtils::commonException</scope>
                <name>~commonException</name>
            </member>
        </listofallmembers>
    </compounddef>
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classzk_app_utils_1_1recovery_strategy_base_type" kind="class" language="C++" prot="public">
        <compoundname>zkAppUtils::recoveryStrategyBaseType</compoundname>
        <derivedcompoundref refid="classzk_app_utils_1_1recovery_strategy_bip39" prot="public" virt="non-virtual">zkAppUtils::recoveryStrategyBip39</derivedcompoundref>
        <derivedcompoundref refid="classzk_app_utils_1_1recovery_strategy_slip39" prot="public" virt="non-virtual">zkAppUtils::recoveryStrategySlip39</derivedcompoundref>
        <includes refid="zk_app_utils_class_8h" local="no">zkAppUtilsClass.h</includes>
        <sectiondef kind="protected-attrib">
            <memberdef kind="variable" id="classzk_app_utils_1_1recovery_strategy_base_type_1ab69e4026f5e5cb91f5b87ae1dbbcbbbb" prot="protected" static="no" mutable="no">
                <type>ZK_RECOVERY_STRATEGY</type>
                <definition>ZK_RECOVERY_STRATEGY zkAppUtils::recoveryStrategyBaseType::recoveryStrategy</definition>
                <argsstring/>
                <name>recoveryStrategy</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="90" column="28" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="90" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="public-func">
            <memberdef kind="function" id="classzk_app_utils_1_1recovery_strategy_base_type_1a316fee25324ed0b968fe2d26a37fd75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type/>
                <definition>zkAppUtils::recoveryStrategyBaseType::recoveryStrategyBaseType</definition>
                <argsstring>()</argsstring>
                <name>recoveryStrategyBaseType</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="93" column="7"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1recovery_strategy_base_type_1a01d29cc209df6b64c98d8e7a18d4e53a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
                <type>ZK_RECOVERY_STRATEGY</type>
                <definition>ZK_RECOVERY_STRATEGY zkAppUtils::recoveryStrategyBaseType::getRecoveryStrategy</definition>
                <argsstring>() const</argsstring>
                <name>getRecoveryStrategy</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="95" column="28" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="95" bodyend="95"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1recovery_strategy_base_type_1a16415ed8c4c0f1382cdab19ad02b0b37" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
                <type>std::string</type>
                <definition>virtual std::string zkAppUtils::recoveryStrategyBaseType::getPassPhrase</definition>
                <argsstring>() const</argsstring>
                <name>getPassPhrase</name>
                <reimplementedby refid="classzk_app_utils_1_1recovery_strategy_bip39_1aaa8a0308315355afda432217cfaf325f">getPassPhrase</reimplementedby>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="97" column="27" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="97" bodyend="97"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>Class used for retrieval of recovery mnemonic for Bip32 wallet. </para>
        </briefdescription>
        <detaileddescription/>
        <inheritancegraph>
            <node id="3">
                <label>zkAppUtils::recoveryStrategySlip39</label>
                <link refid="classzk_app_utils_1_1recovery_strategy_slip39"/>
                <childnode refid="1" relation="public-inheritance"/>
            </node>
            <node id="2">
                <label>zkAppUtils::recoveryStrategyBip39</label>
                <link refid="classzk_app_utils_1_1recovery_strategy_bip39"/>
                <childnode refid="1" relation="public-inheritance"/>
            </node>
            <node id="1">
                <label>zkAppUtils::recoveryStrategyBaseType</label>
                <link refid="classzk_app_utils_1_1recovery_strategy_base_type"/>
            </node>
        </inheritancegraph>
        <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="87" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="88" bodyend="98"/>
        <listofallmembers>
            <member refid="classzk_app_utils_1_1recovery_strategy_base_type_1a16415ed8c4c0f1382cdab19ad02b0b37" prot="public" virt="virtual">
                <scope>zkAppUtils::recoveryStrategyBaseType</scope>
                <name>getPassPhrase</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_base_type_1a01d29cc209df6b64c98d8e7a18d4e53a" prot="public" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategyBaseType</scope>
                <name>getRecoveryStrategy</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_base_type_1ab69e4026f5e5cb91f5b87ae1dbbcbbbb" prot="protected" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategyBaseType</scope>
                <name>recoveryStrategy</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_base_type_1a316fee25324ed0b968fe2d26a37fd75f" prot="public" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategyBaseType</scope>
                <name>recoveryStrategyBaseType</name>
            </member>
        </listofallmembers>
    </compounddef>
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classzk_app_utils_1_1recovery_strategy_bip39" kind="class" language="C++" prot="public">
        <compoundname>zkAppUtils::recoveryStrategyBip39</compoundname>
        <basecompoundref refid="classzk_app_utils_1_1recovery_strategy_base_type" prot="public" virt="non-virtual">zkAppUtils::recoveryStrategyBaseType</basecompoundref>
        <includes refid="zk_app_utils_class_8h" local="no">zkAppUtilsClass.h</includes>
        <sectiondef kind="private-attrib">
            <memberdef kind="variable" id="classzk_app_utils_1_1recovery_strategy_bip39_1a1800a903a5bd56d9a98eaaec79a1478d" prot="private" static="no" mutable="no">
                <type>std::string</type>
                <definition>std::string zkAppUtils::recoveryStrategyBip39::passPhrase</definition>
                <argsstring/>
                <name>passPhrase</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="109" column="19" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="109" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="public-func">
            <memberdef kind="function" id="classzk_app_utils_1_1recovery_strategy_bip39_1a60083b8d10b1a294503b2af590607abf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type/>
                <definition>zkAppUtils::recoveryStrategyBip39::recoveryStrategyBip39</definition>
                <argsstring>()</argsstring>
                <name>recoveryStrategyBip39</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="113" column="7"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1recovery_strategy_bip39_1aab5b4231f32ad9ffa695274b0d94fc9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type/>
                <definition>zkAppUtils::recoveryStrategyBip39::recoveryStrategyBip39</definition>
                <argsstring>(const std::string &amp;passphrase)</argsstring>
                <name>recoveryStrategyBip39</name>
                <param>
                    <type>const std::string &amp;</type>
                    <declname>passphrase</declname>
                </param>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="115" column="7"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1recovery_strategy_bip39_1ac6af4c993e146fced982e21fe2dabd0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::recoveryStrategyBip39::setPassPhrase</definition>
                <argsstring>(const std::string &amp;passphrase)</argsstring>
                <name>setPassPhrase</name>
                <param>
                    <type>const std::string &amp;</type>
                    <declname>passphrase</declname>
                </param>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="117" column="12" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="117" bodyend="117"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1recovery_strategy_bip39_1aaa8a0308315355afda432217cfaf325f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
                <type>std::string</type>
                <definition>std::string zkAppUtils::recoveryStrategyBip39::getPassPhrase</definition>
                <argsstring>() const</argsstring>
                <name>getPassPhrase</name>
                <reimplements refid="classzk_app_utils_1_1recovery_strategy_base_type_1a16415ed8c4c0f1382cdab19ad02b0b37">getPassPhrase</reimplements>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="118" column="19" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="118" bodyend="118"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>Class used for bip39 recovery strategy. Contains a b64 encoded passphrase to use. </para>
        </briefdescription>
        <detaileddescription/>
        <inheritancegraph>
            <node id="1">
                <label>zkAppUtils::recoveryStrategyBip39</label>
                <link refid="classzk_app_utils_1_1recovery_strategy_bip39"/>
                <childnode refid="2" relation="public-inheritance"/>
            </node>
            <node id="2">
                <label>zkAppUtils::recoveryStrategyBaseType</label>
                <link refid="classzk_app_utils_1_1recovery_strategy_base_type"/>
            </node>
        </inheritancegraph>
        <collaborationgraph>
            <node id="1">
                <label>zkAppUtils::recoveryStrategyBip39</label>
                <link refid="classzk_app_utils_1_1recovery_strategy_bip39"/>
                <childnode refid="2" relation="public-inheritance"/>
            </node>
            <node id="2">
                <label>zkAppUtils::recoveryStrategyBaseType</label>
                <link refid="classzk_app_utils_1_1recovery_strategy_base_type"/>
            </node>
        </collaborationgraph>
        <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="103" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="104" bodyend="119"/>
        <listofallmembers>
            <member refid="classzk_app_utils_1_1recovery_strategy_bip39_1aaa8a0308315355afda432217cfaf325f" prot="public" virt="virtual">
                <scope>zkAppUtils::recoveryStrategyBip39</scope>
                <name>getPassPhrase</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_base_type_1a01d29cc209df6b64c98d8e7a18d4e53a" prot="public" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategyBip39</scope>
                <name>getRecoveryStrategy</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_bip39_1a1800a903a5bd56d9a98eaaec79a1478d" prot="private" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategyBip39</scope>
                <name>passPhrase</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_base_type_1ab69e4026f5e5cb91f5b87ae1dbbcbbbb" prot="protected" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategyBip39</scope>
                <name>recoveryStrategy</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_base_type_1a316fee25324ed0b968fe2d26a37fd75f" prot="public" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategyBip39</scope>
                <name>recoveryStrategyBaseType</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_bip39_1a60083b8d10b1a294503b2af590607abf" prot="public" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategyBip39</scope>
                <name>recoveryStrategyBip39</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_bip39_1aab5b4231f32ad9ffa695274b0d94fc9b" prot="public" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategyBip39</scope>
                <name>recoveryStrategyBip39</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_bip39_1ac6af4c993e146fced982e21fe2dabd0a" prot="public" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategyBip39</scope>
                <name>setPassPhrase</name>
            </member>
        </listofallmembers>
    </compounddef>
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classzk_app_utils_1_1recovery_strategy_slip39" kind="class" language="C++" prot="public">
        <compoundname>zkAppUtils::recoveryStrategySlip39</compoundname>
        <basecompoundref refid="classzk_app_utils_1_1recovery_strategy_base_type" prot="public" virt="non-virtual">zkAppUtils::recoveryStrategyBaseType</basecompoundref>
        <includes refid="zk_app_utils_class_8h" local="no">zkAppUtilsClass.h</includes>
        <sectiondef kind="private-attrib">
            <memberdef kind="variable" id="classzk_app_utils_1_1recovery_strategy_slip39_1a82e4faec224b7d7bca953a057cae9615" prot="private" static="no" mutable="no">
                <type>int</type>
                <definition>int zkAppUtils::recoveryStrategySlip39::m</definition>
                <argsstring/>
                <name>m</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="124" column="11" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="124" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="classzk_app_utils_1_1recovery_strategy_slip39_1a1d618de5b49c810fabf773f07e0b63cc" prot="private" static="no" mutable="no">
                <type>int</type>
                <definition>int zkAppUtils::recoveryStrategySlip39::n</definition>
                <argsstring/>
                <name>n</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="125" column="11" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="125" bodyend="-1"/>
            </memberdef>
            <memberdef kind="variable" id="classzk_app_utils_1_1recovery_strategy_slip39_1afcc28cb3ba2fe002d730cef4f192c9ce" prot="private" static="no" mutable="no">
                <type>std::vector&lt; std::string &gt;</type>
                <definition>std::vector&lt;std::string&gt; zkAppUtils::recoveryStrategySlip39::listPassPhrases</definition>
                <argsstring/>
                <name>listPassPhrases</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="126" column="19" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="126" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="public-func">
            <memberdef kind="function" id="classzk_app_utils_1_1recovery_strategy_slip39_1ad7034e2cfdd640b8f3ece5ff7a7d7e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type/>
                <definition>zkAppUtils::recoveryStrategySlip39::recoveryStrategySlip39</definition>
                <argsstring>()</argsstring>
                <name>recoveryStrategySlip39</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="130" column="7"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1recovery_strategy_slip39_1abf523a8bb2884aabdfbbc90f26846130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type/>
                <definition>zkAppUtils::recoveryStrategySlip39::recoveryStrategySlip39</definition>
                <argsstring>(int x, int y, std::vector&lt; std::string &gt; list_passphrases)</argsstring>
                <name>recoveryStrategySlip39</name>
                <param>
                    <type>int</type>
                    <declname>x</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>y</declname>
                </param>
                <param>
                    <type>std::vector&lt; std::string &gt;</type>
                    <declname>list_passphrases</declname>
                </param>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="132" column="7"/>
            </memberdef>
        </sectiondef>
        <briefdescription/>
        <detaileddescription/>
        <inheritancegraph>
            <node id="1">
                <label>zkAppUtils::recoveryStrategySlip39</label>
                <link refid="classzk_app_utils_1_1recovery_strategy_slip39"/>
                <childnode refid="2" relation="public-inheritance"/>
            </node>
            <node id="2">
                <label>zkAppUtils::recoveryStrategyBaseType</label>
                <link refid="classzk_app_utils_1_1recovery_strategy_base_type"/>
            </node>
        </inheritancegraph>
        <collaborationgraph>
            <node id="1">
                <label>zkAppUtils::recoveryStrategySlip39</label>
                <link refid="classzk_app_utils_1_1recovery_strategy_slip39"/>
                <childnode refid="2" relation="public-inheritance"/>
            </node>
            <node id="2">
                <label>zkAppUtils::recoveryStrategyBaseType</label>
                <link refid="classzk_app_utils_1_1recovery_strategy_base_type"/>
            </node>
        </collaborationgraph>
        <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="121" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="122" bodyend="133"/>
        <listofallmembers>
            <member refid="classzk_app_utils_1_1recovery_strategy_base_type_1a16415ed8c4c0f1382cdab19ad02b0b37" prot="public" virt="virtual">
                <scope>zkAppUtils::recoveryStrategySlip39</scope>
                <name>getPassPhrase</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_base_type_1a01d29cc209df6b64c98d8e7a18d4e53a" prot="public" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategySlip39</scope>
                <name>getRecoveryStrategy</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_slip39_1afcc28cb3ba2fe002d730cef4f192c9ce" prot="private" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategySlip39</scope>
                <name>listPassPhrases</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_slip39_1a82e4faec224b7d7bca953a057cae9615" prot="private" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategySlip39</scope>
                <name>m</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_slip39_1a1d618de5b49c810fabf773f07e0b63cc" prot="private" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategySlip39</scope>
                <name>n</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_base_type_1ab69e4026f5e5cb91f5b87ae1dbbcbbbb" prot="protected" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategySlip39</scope>
                <name>recoveryStrategy</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_base_type_1a316fee25324ed0b968fe2d26a37fd75f" prot="public" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategySlip39</scope>
                <name>recoveryStrategyBaseType</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_slip39_1ad7034e2cfdd640b8f3ece5ff7a7d7e26" prot="public" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategySlip39</scope>
                <name>recoveryStrategySlip39</name>
            </member>
            <member refid="classzk_app_utils_1_1recovery_strategy_slip39_1abf523a8bb2884aabdfbbc90f26846130" prot="public" virt="non-virtual">
                <scope>zkAppUtils::recoveryStrategySlip39</scope>
                <name>recoveryStrategySlip39</name>
            </member>
        </listofallmembers>
    </compounddef>
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classzk_app_utils_1_1timeout_exception" kind="class" language="C++" prot="public">
        <compoundname>zkAppUtils::timeoutException</compoundname>
        <basecompoundref prot="public" virt="non-virtual">std::exception</basecompoundref>
        <includes refid="zk_app_utils_class_8h" local="no">zkAppUtilsClass.h</includes>
        <sectiondef kind="private-attrib">
            <memberdef kind="variable" id="classzk_app_utils_1_1timeout_exception_1a416fcdb93ec8fa1a12df12891d9a727e" prot="private" static="no" mutable="no">
                <type>std::string</type>
                <definition>std::string zkAppUtils::timeoutException::msg</definition>
                <argsstring/>
                <name>msg</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="81" column="21" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="81" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="public-func">
            <memberdef kind="function" id="classzk_app_utils_1_1timeout_exception_1aa5da5e052dc4c819ad7294fb0c840d58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type/>
                <definition>zkAppUtils::timeoutException::timeoutException</definition>
                <argsstring>(std::string status)</argsstring>
                <name>timeoutException</name>
                <param>
                    <type>std::string</type>
                    <declname>status</declname>
                </param>
                <briefdescription>
                    <para>Constructor. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>status</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A string which described the verbose exception </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="68" column="9"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1timeout_exception_1abf7d12b6c879936a5e91438133716e31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
                <type/>
                <definition>virtual zkAppUtils::timeoutException::~timeoutException</definition>
                <argsstring>()</argsstring>
                <name>~timeoutException</name>
                <exceptions> throw ()</exceptions>
                <briefdescription>
                    <para>Destructor. </para>
                </briefdescription>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="72" column="17" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="72" bodyend="72"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1timeout_exception_1aa02ea9cf2775e88dd07620569e2a9904" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
                <type>const char *</type>
                <definition>const char* zkAppUtils::timeoutException::what</definition>
                <argsstring>() const</argsstring>
                <name>what</name>
                <exceptions> throw ()</exceptions>
                <briefdescription>
                    <para>Override of std::exception <ref refid="classzk_app_utils_1_1timeout_exception_1aa02ea9cf2775e88dd07620569e2a9904" kindref="member">what()</ref> method. </para>
                </briefdescription>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="76" column="20"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>Exception class derived from std::exception. </para>
        </briefdescription>
        <detaileddescription/>
        <inheritancegraph>
            <node id="1">
                <label>zkAppUtils::timeoutException</label>
                <link refid="classzk_app_utils_1_1timeout_exception"/>
                <childnode refid="2" relation="public-inheritance"/>
            </node>
            <node id="2">
                <label>std::exception</label>
            </node>
        </inheritancegraph>
        <collaborationgraph>
            <node id="1">
                <label>zkAppUtils::timeoutException</label>
                <link refid="classzk_app_utils_1_1timeout_exception"/>
                <childnode refid="2" relation="public-inheritance"/>
            </node>
            <node id="2">
                <label>std::exception</label>
            </node>
        </collaborationgraph>
        <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="61" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="62" bodyend="82"/>
        <listofallmembers>
            <member refid="classzk_app_utils_1_1timeout_exception_1a416fcdb93ec8fa1a12df12891d9a727e" prot="private" virt="non-virtual">
                <scope>zkAppUtils::timeoutException</scope>
                <name>msg</name>
            </member>
            <member refid="classzk_app_utils_1_1timeout_exception_1aa5da5e052dc4c819ad7294fb0c840d58" prot="public" virt="non-virtual">
                <scope>zkAppUtils::timeoutException</scope>
                <name>timeoutException</name>
            </member>
            <member refid="classzk_app_utils_1_1timeout_exception_1aa02ea9cf2775e88dd07620569e2a9904" prot="public" virt="non-virtual">
                <scope>zkAppUtils::timeoutException</scope>
                <name>what</name>
            </member>
            <member refid="classzk_app_utils_1_1timeout_exception_1abf7d12b6c879936a5e91438133716e31" prot="public" virt="virtual">
                <scope>zkAppUtils::timeoutException</scope>
                <name>~timeoutException</name>
            </member>
        </listofallmembers>
    </compounddef>
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classzk_app_utils_1_1zk_class" kind="class" language="C++" prot="public">
        <compoundname>zkAppUtils::zkClass</compoundname>
        <includes refid="zk_app_utils_class_8h" local="no">zkAppUtilsClass.h</includes>
        <sectiondef kind="user-defined">
            <header>Zymkey Context</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1af2017a24669f2f1f84743ab8eb1b2e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type/>
                <definition>zkAppUtils::zkClass::zkClass</definition>
                <argsstring>()</argsstring>
                <name>zkClass</name>
                <briefdescription>
                    <para>Constructor: a Zymkey context is opened. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="171" column="9"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a9fd36f5cebc6fc718abd7c63b0e30035" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
                <type/>
                <definition>virtual zkAppUtils::zkClass::~zkClass</definition>
                <argsstring>()</argsstring>
                <name>~zkClass</name>
                <briefdescription>
                    <para>Destructor: the Zymkey context is closed. </para>
                </briefdescription>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="175" column="17"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Random Number Generation</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a9a4a7c019b82d8b1760ae9f743de944d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::createRandDataFile</definition>
                <argsstring>(std::string &amp;dst_filename, int rdata_sz)</argsstring>
                <name>createRandDataFile</name>
                <param>
                    <type>std::string &amp;</type>
                    <declname>dst_filename</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>rdata_sz</declname>
                </param>
                <briefdescription>
                    <para>Write random data to a file. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dst_filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>A string containing the absolute path to the file where random data is written </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>rdata_sz</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The number of random bytes to generate </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="192" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ae6c1bc3ff39beea99f72e7740c528313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::getRandBytes</definition>
                <argsstring>(int rdata_sz)</argsstring>
                <name>getRandBytes</name>
                <param>
                    <type>int</type>
                    <declname>rdata_sz</declname>
                </param>
                <briefdescription>
                    <para>Generate a block of random data. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>rdata_sz</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The number of random bytes to generate </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>A pointer to container with the random bytes </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="200" column="31"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Lock Data</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a65aee74e18121f104b8420822013452e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::lockData</definition>
                <argsstring>(const std::string &amp;src_pt_filename, const std::string &amp;dst_ct_filename, bool use_shared_key=false)</argsstring>
                <name>lockData</name>
                <param>
                    <type>const std::string &amp;</type>
                    <declname>src_pt_filename</declname>
                </param>
                <param>
                    <type>const std::string &amp;</type>
                    <declname>dst_ct_filename</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Locks data from a plaintext source file and stores locked data object to a destination file. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>src_pt_filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Absolute path to source plaintext file </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dst_ct_filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Absolute path to destination file which will contain locked data object </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>use_shared_key</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Determines whether one-way or shared key is used for locking. Default = false. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="222" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a12a0b56f2d9957e4f6f66964b1dc88c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::lockData</definition>
                <argsstring>(const byteArray &amp;src_pt_data, const std::string &amp;dst_ct_filename, bool use_shared_key=false)</argsstring>
                <name>lockData</name>
                <param>
                    <type>const <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>src_pt_data</declname>
                </param>
                <param>
                    <type>const std::string &amp;</type>
                    <declname>dst_ct_filename</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Locks data from a plaintext source byte container and stores locked data object to a destination file. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>src_pt_data</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Unsigned byte container which holds source plaintext data </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dst_ct_filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Absolute path to destination file which will contain locked data object </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>use_shared_key</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Determines whether one-way or shared key is used for locking. Default = false. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="238" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a749ea09595c364126d54f99022d4ceb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::lockData</definition>
                <argsstring>(const std::string &amp;src_pt_filename, bool use_shared_key=false)</argsstring>
                <name>lockData</name>
                <param>
                    <type>const std::string &amp;</type>
                    <declname>src_pt_filename</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Locks data from a plaintext source file and stores locked data object in a container of unsigned bytes. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>src_pt_filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Absolute path to source plaintext file </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>use_shared_key</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Determines whether one-way or shared key is used for locking. Default = false. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Byte container with locked data </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="252" column="31"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a5302506bc51be472e44f3f21b7223a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::lockData</definition>
                <argsstring>(const byteArray &amp;src_pt_data, bool use_shared_key=false)</argsstring>
                <name>lockData</name>
                <param>
                    <type>const <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>src_pt_data</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Locks data from a plaintext source byte container and stores locked data object in a container of unsigned bytes. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>src_pt_data</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Unsigned byte container which holds source plaintext data </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>use_shared_key</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Determines whether one-way or shared key is used for locking. Default = false. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Byte container with locked data </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="265" column="31"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Unlock Data</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a0ecbe6c828556f8f762fb74e628f13af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::unlockData</definition>
                <argsstring>(const std::string &amp;src_ct_filename, const std::string &amp;dst_pt_filename, bool use_shared_key=false)</argsstring>
                <name>unlockData</name>
                <param>
                    <type>const std::string &amp;</type>
                    <declname>src_ct_filename</declname>
                </param>
                <param>
                    <type>const std::string &amp;</type>
                    <declname>dst_pt_filename</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Unocks a locked data object from source file and stores unlocked data object to a destination file. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>src_ct_filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Absolute path to source file which contains locked data object </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dst_pt_filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Absolute path to destination file which will contain unlocked plaintext data </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>use_shared_key</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Determines whether one-way or shared key is used for locking. Default = false. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="288" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a40befc1bfc64e6a06e2169c8a102cd2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::unlockData</definition>
                <argsstring>(const byteArray &amp;src_ct_data, const std::string &amp;dst_pt_filename, bool use_shared_key=false)</argsstring>
                <name>unlockData</name>
                <param>
                    <type>const <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>src_ct_data</declname>
                </param>
                <param>
                    <type>const std::string &amp;</type>
                    <declname>dst_pt_filename</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Unlocks a locked data object contained in an unsigned byte container and stores plaintext data to a destination file. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>src_ct_data</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Unsigned byte container which holds locked data object </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dst_pt_filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Absolute path to destination file which will contain unlocked plaintext data </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>use_shared_key</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Determines whether one-way or shared key is used for locking. Default = false. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="304" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ada1f322ad059f421c48af150a5a0beec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::unlockData</definition>
                <argsstring>(const std::string &amp;src_ct_filename, bool use_shared_key=false)</argsstring>
                <name>unlockData</name>
                <param>
                    <type>const std::string &amp;</type>
                    <declname>src_ct_filename</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Unlocks a locked data object from a plaintext source file and stores plaintext data in a container of unsigned bytes. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>src_ct_filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Absolute path to source file which contains locked data object </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>use_shared_key</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Determines whether one-way or shared key is used for locking. Default = false. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Byte container with plaintext data </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="319" column="31"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a0c33653e5fe062d0784f64e4ac07ce08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::unlockData</definition>
                <argsstring>(const byteArray &amp;src_ct_bytes, bool use_shared_key=false)</argsstring>
                <name>unlockData</name>
                <param>
                    <type>const <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>src_ct_bytes</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>use_shared_key</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Unlocks a locked data object contained in an unsigned byte container and stores plaintext data in a container of unsigned bytes. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>src_ct_data</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Unsigned byte container which holds locked data object </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>use_shared_key</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Determines whether one-way or shared key is used for locking. Default = false. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Byte container with plaintext data </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="333" column="31"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>ECDSA</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1aa4da8d53be65803af718a336407ea6d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::genECDSASigFromDigest</definition>
                <argsstring>(byteArray &amp;digest, int slot=0)</argsstring>
                <name>genECDSASigFromDigest</name>
                <param>
                    <type>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>digest</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>Generate a signature from a data digest using the Zymkey's private key. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>digest</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Currently, this should be a SHA256 digest </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The key slot to use for verification. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Byte container with binary signature </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="352" column="31"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a11af5c32dc4d0a87b072e7b056a550e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::genECDSASigFromDigest</definition>
                <argsstring>(byteArray &amp;digest, uint8_t &amp;recovery_id, int slot=0)</argsstring>
                <name>genECDSASigFromDigest</name>
                <param>
                    <type>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>digest</declname>
                </param>
                <param>
                    <type>uint8_t &amp;</type>
                    <declname>recovery_id</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>Generate a signature from a data digest using the Zymkey's private key. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>digest</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Currently, this should be a SHA256 digest </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The key slot to use for verification. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>recovery_id</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>[Output]Returns recovery id value needed for ethereum key recovery. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Byte container with binary signature </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="365" column="31"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a5046d6ddc2fb67c7c352df859c84089d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>bool</type>
                <definition>bool zkAppUtils::zkClass::verifyECDSASigFromDigest</definition>
                <argsstring>(byteArray &amp;digest, byteArray &amp;sig, int pub_key_slot=0, bool pub_key_is_foreign=false)</argsstring>
                <name>verifyECDSASigFromDigest</name>
                <param>
                    <type>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>digest</declname>
                </param>
                <param>
                    <type>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>sig</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>pub_key_slot</declname>
                    <defval>0</defval>
                </param>
                <param>
                    <type>bool</type>
                    <declname>pub_key_is_foreign</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Verify a signature from a data digest using the Zymkey's public key. The public key is not given as an input. Rather, the Zymkey uses its own copy of the private key. This insures that the public key that matches the private key is used. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>digest</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Currently, this should be a SHA256 digest </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>sig</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The signature to verify </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pub_key_slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The key slot to use for verification. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pub_key_is_foreign</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>If false, the normal key store is referenced. Otherwise, the foreign public key store is referenced. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pub_key_is_foreign</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>If false, the normal key store is referenced. Otherwise, the foreign public key store is referenced. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>true = signature verification passed, false = signature verification failed </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="387" column="14"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>ECDH and KDF</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a094c61c54bcc4c064e961a75ad92c04b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::doRawECDH</definition>
                <argsstring>(int slot, byteArray &amp;peer_pubkey)</argsstring>
                <name>doRawECDH</name>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>peer_pubkey</declname>
                </param>
                <briefdescription>
                    <para>Perform a raw ECDH operation. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>Perform an ECDH operation with no Key Derivation Function (KDF). The raw pre-master secret is returned in the response. The peer public key is presented in the call. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The key slot to use for the local key. If this parameter is -1, the ephemeral key is used. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>peer_pubkey</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The peer public key. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Byte container with pre master secret </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="409" column="31"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ac4c9c958cb219943bf590debfff42d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::doRawECDHWithIntPeerPubkey</definition>
                <argsstring>(int slot, int peer_pubkey_slot, bool peer_pubkey_slot_is_foreign)</argsstring>
                <name>doRawECDHWithIntPeerPubkey</name>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>peer_pubkey_slot</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>peer_pubkey_slot_is_foreign</declname>
                </param>
                <briefdescription>
                    <para>Perform a raw ECDH operation. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>Perform an ECDH operation with no Key Derivation Function (KDF). The raw pre-master secret is returned in the response. The peer public key is referenced from the zymkey internal key store. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The key slot to use for the local key. If this parameter is -1, the ephemeral key is used. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>peer_pubkey_slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The peer public key slot where the peer public key is to be found. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>peer_pubkey_slot_is_foreign</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>If true, the peer public key slot is found in the foreign public keyring. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Byte container with pre master secret </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="426" column="31"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ac969e9bb26200c34d9b80b6b3287fc4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::doECDHAndKDF</definition>
                <argsstring>(ZK_ECDH_KDF_TYPE kdf_type, int slot, byteArray &amp;peer_pubkey, byteArray &amp;salt, byteArray &amp;info, int num_iterations, int derived_key_sz)</argsstring>
                <name>doECDHAndKDF</name>
                <param>
                    <type>ZK_ECDH_KDF_TYPE</type>
                    <declname>kdf_type</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>peer_pubkey</declname>
                </param>
                <param>
                    <type>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>salt</declname>
                </param>
                <param>
                    <type>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>info</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>num_iterations</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>derived_key_sz</declname>
                </param>
                <briefdescription>
                    <para>Perform an ECDH operation plus Key Derivation Function. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>Perform an ECDH operation with Key Derivation Function (KDF). The derived key is returned in the response. The peer public key is presented in the call. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The key slot to use for the local key. If this parameter is -1, the ephemeral key is used. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>peer_pubkey</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The peer public key. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>salt</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The salt to use for the selected KDF. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>info</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The info field to use for RFC 5869. Ignored for PBKDF2. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>num_iterations</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of iterations to carry out (PBKDF only) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>derived_key_sz</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The desired number of bytes to return for the KDF. For RFC 5869, this value must be less than 8160 bytes (SHA256) or 16320 (SHA512). </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Byte container with pre master secret. </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="450" column="30"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ad76f1a1781c845623194d7d3e420796f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::doECDHAndKDFWithIntPeerPubkey</definition>
                <argsstring>(ZK_ECDH_KDF_TYPE kdf_type, int slot, int peer_pubkey_slot, bool peer_pubkey_slot_is_foreign, byteArray &amp;salt, byteArray &amp;info, int num_iterations, int derived_key_sz)</argsstring>
                <name>doECDHAndKDFWithIntPeerPubkey</name>
                <param>
                    <type>ZK_ECDH_KDF_TYPE</type>
                    <declname>kdf_type</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>peer_pubkey_slot</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>peer_pubkey_slot_is_foreign</declname>
                </param>
                <param>
                    <type>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>salt</declname>
                </param>
                <param>
                    <type>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>info</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>num_iterations</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>derived_key_sz</declname>
                </param>
                <briefdescription>
                    <para>Perform an ECDH operation plus Key Derivation Function. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>Perform an ECDH operation with Key Derivation Function (KDF). The derived key is returned in the response. The peer public key is referenced from the zymkey internal key store. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The key slot to use for the local key. If this parameter is -1, the ephemeral key is used. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>peer_pubkey_slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The peer public key slot where the peer public key is to be found. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>peer_pubkey_slot_is_foreign</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>If true, the peer public key slot is found in the foreign public keyring. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>salt</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The salt to use for the selected KDF. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>info</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The info field to use for RFC 5869. Ignored for PBKDF2. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>num_iterations</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of iterations to carry out (PBKDF only) </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>derived_key_sz</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The desired number of bytes to return for the KDF. For RFC 5869, this value must be less than 8160 bytes (SHA256) or 16320 (SHA512). </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Byte container with pre master secret. </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="481" column="30"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Key Management</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a90e0ace2d84e42b6ccdaad122f9035c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::saveECDSAPubKey2File</definition>
                <argsstring>(std::string dst_filename, int slot=0)</argsstring>
                <name>saveECDSAPubKey2File</name>
                <param>
                    <type>std::string</type>
                    <declname>dst_filename</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>[DEPRECATED] Use exportPubKey2File. Save the public key that matches the Zymkey's private key into a PEM formatted file. Mainly used for Certificate Signing Request (CSR) generation. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dst_filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Absolute location where the PEM formatted file is to be stored </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reserved for future use </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="509" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a1bdc2d2f9d479a28af6de6cd7889020b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::exportPubKey2File</definition>
                <argsstring>(std::string dst_filename, int pubkey_slot=0, bool slot_is_foreign=false)</argsstring>
                <name>exportPubKey2File</name>
                <param>
                    <type>std::string</type>
                    <declname>dst_filename</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>pubkey_slot</declname>
                    <defval>0</defval>
                </param>
                <param>
                    <type>bool</type>
                    <declname>slot_is_foreign</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Store the public key to a host file in PEM format. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function is useful for generating Certificate Signing Requests (CSR). <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>dst_filename</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Filename where PEM formatted public key is to be stored. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pubkey_slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The key slot to retrieve. Zymkey and HSM4 have slots 0, 1, and 2. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot_is_foreign</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>If true, designates the pubkey slot to come from the foreign keystore. (model &gt;= HSM6) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="523" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a545db81233e96730f9d33af01b6983b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::getECDSAPubKey</definition>
                <argsstring>(int slot=0)</argsstring>
                <name>getECDSAPubKey</name>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>[DEPRECATED] Use exportPubKey. Get a container of bytes which contains the ECDSA public key </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Reserved for future use. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Byte container with binary public key </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="533" column="31"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ae13277c55222907a21537b790279d214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">zkAppUtils::byteArray</ref> *</type>
                <definition>zkAppUtils::byteArray* zkAppUtils::zkClass::exportPubKey</definition>
                <argsstring>(int pubkey_slot=0, bool slot_is_foreign=0)</argsstring>
                <name>exportPubKey</name>
                <param>
                    <type>int</type>
                    <declname>pubkey_slot</declname>
                    <defval>0</defval>
                </param>
                <param>
                    <type>bool</type>
                    <declname>slot_is_foreign</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>Gets the public key and stores in a byte array created by this function. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pubkey_slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The key slot to retrieve. Zymkey and HSM4 have slots 0, 1, and 2. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot_is_foreign</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>If true, designates the pubkey slot to come from the foreign keystore. (model &gt;= HSM6) </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="543" column="31"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a636729b4700e21c3392bd75aac2d8873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>
                    <ref refid="namespacezk_app_utils_1a7cc12af0cdc6374a29588629bd450da6" kindref="member">intArray</ref> *</type>
                <definition>intArray* zkAppUtils::zkClass::getAllocSlotsList</definition>
                <argsstring>(bool foreign_key_pool)</argsstring>
                <name>getAllocSlotsList</name>
                <param>
                    <type>bool</type>
                    <declname>foreign_key_pool</declname>
                </param>
                <briefdescription>
                    <para>Get the list of allocated keys. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function returns a list of all allocated key slots. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>foreign_key_pool</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) if true, retrieve allocation list of the foreign keys </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Array of the allocated keys. </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="552" column="18"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1aa95d4e59e180197bf8e847b4d52d5001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkAppUtils::zkClass::storeForeignPubKey</definition>
                <argsstring>(ZK_EC_KEY_TYPE pk_type, byteArray &amp;pk)</argsstring>
                <name>storeForeignPubKey</name>
                <param>
                    <type>ZK_EC_KEY_TYPE</type>
                    <declname>pk_type</declname>
                </param>
                <param>
                    <type>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>pk</declname>
                </param>
                <briefdescription>
                    <para>Store a new foreign public key in Zymkey. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function stores a new foreign public key in the Zymkey public key ring. This public key can be used for signature verification in use cases where it is desirable to hide the public key. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pk_type</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The type of the public key. {ZK_NISTP256, ZK_SECP256R1 = ZK_NISTP256, ZK_SECP256K1} </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pk</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Public key to store. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Allocated slot number in foreign key store, less than 0 for failure. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="567" column="13"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ab730469e9e5ffb217455a775960732d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::disablePubKeyExport</definition>
                <argsstring>(int pubkey_slot, bool slot_is_foreign=false)</argsstring>
                <name>disablePubKeyExport</name>
                <param>
                    <type>int</type>
                    <declname>pubkey_slot</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>slot_is_foreign</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Prevent a public key from being exported to the host. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function prevents the public key at the specified slot from being exported to the host using the API zkExportPubKey. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pubkey_slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The key slot to disable pubkey export on. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot_is_foreign</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The slot parameter refers to a slot in the foreign keyring. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="578" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1afa4595edba19c2c98109763898dbfc9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkAppUtils::zkClass::genKeyPair</definition>
                <argsstring>(ZK_EC_KEY_TYPE type)</argsstring>
                <name>genKeyPair</name>
                <param>
                    <type>ZK_EC_KEY_TYPE</type>
                    <declname>type</declname>
                </param>
                <briefdescription>
                    <para>Generate a new persistent key pair. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function generates a new key pair of the specified type and store it persistently. This key pair cannot be used as part of the zymkey's digital wallet operations. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>type</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The type of key to generate (ZK_EC_KEY_TYPE). {ZK_NISTP256, ZK_SECP256R1 = ZK_NISTP256, ZK_SECP256K1} </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Allocated slot number if successful, less than 0 for failure. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="590" column="13"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ada05198c035f694fda303a8b7e30b4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::genEphemeralKeyPair</definition>
                <argsstring>(ZK_EC_KEY_TYPE type)</argsstring>
                <name>genEphemeralKeyPair</name>
                <param>
                    <type>ZK_EC_KEY_TYPE</type>
                    <declname>type</declname>
                </param>
                <briefdescription>
                    <para>Generate an ephemeral key pair. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function generates an ephemeral key pair of the specified type. Ephemeral key pairs are useful when performing ECDH for time-of-flight encryption. Only one ephemeral key slot is available and is not persistent between reboots. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>type</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The type of key to generate (ZK_EC_KEY_TYPE). {ZK_NISTP256, ZK_SECP256R1 = ZK_NISTP256, ZK_SECP256K1} </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="601" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a62f486dc7c3502fd49c43f628a48fd62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::removeKey</definition>
                <argsstring>(int slot, bool slot_is_foreign=false)</argsstring>
                <name>removeKey</name>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>slot_is_foreign</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Remove a key pair or a foreign public key. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function deletes a key pair or a foreign public key from persistent storage. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The slot </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot_is_foreign</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The slot parameter refers to a slot in the foreign keyring. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="611" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a2b2d25ba5fa9e7ddd56e293aeac069c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::invalidateEphemeralKey</definition>
                <argsstring>()</argsstring>
                <name>invalidateEphemeralKey</name>
                <briefdescription>
                    <para>Invalidate the ephemeral key. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function invalidates the ephemeral key. <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="617" column="14"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Digital Wallet (BIP32/39/44)</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ab78a31c0b1ae4111ace049fdfa5e9eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkAppUtils::zkClass::genWalletMasterSeed</definition>
                <argsstring>(ZK_EC_KEY_TYPE type, std::string &amp;wallet_name, const byteArray &amp;master_generator_key=byteArray(), const recoveryStrategyBaseType &amp;recovery_strategy=recoveryStrategyBaseType(), std::string *mnemonic=new std::string(""))</argsstring>
                <name>genWalletMasterSeed</name>
                <param>
                    <type>ZK_EC_KEY_TYPE</type>
                    <declname>type</declname>
                </param>
                <param>
                    <type>std::string &amp;</type>
                    <declname>wallet_name</declname>
                </param>
                <param>
                    <type>const <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>master_generator_key</declname>
                    <defval>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref>()</defval>
                </param>
                <param>
                    <type>const <ref refid="classzk_app_utils_1_1recovery_strategy_base_type" kindref="compound">recoveryStrategyBaseType</ref> &amp;</type>
                    <declname>recovery_strategy</declname>
                    <defval>
                        <ref refid="classzk_app_utils_1_1recovery_strategy_base_type" kindref="compound">recoveryStrategyBaseType</ref>()</defval>
                </param>
                <param>
                    <type>std::string *</type>
                    <declname>mnemonic</declname>
                    <defval>new std::string("")</defval>
                </param>
                <briefdescription>
                    <para>Generate a BIP39 master seed to start a new blockchain wallet. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function generates a new blockchain master seed for creating a new wallet per BIP39. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>type</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The type of key to generate (ZK_EC_KEY_TYPE). {ZK_NISTP256, ZK_SECP256R1 = ZK_NISTP256, ZK_SECP256K1} </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>wallet_name</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>An ASCII string which contains the name of the wallet. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>master_generator_key</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The master generator key used to help generate the master seed (bip32). Defaults to empty string </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>recovery_strategy</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The recovery strategy object for returning bip39 or slip39(latter not supported currently). Defaults to no recovery strategy </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>(output)</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Allocated mnemonic if it was asked for. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The slot the master seed was allocated to. </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="646" column="13"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a908e3ce1eb468f08d48d542d0b27145e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkAppUtils::zkClass::genWalletChildKey</definition>
                <argsstring>(int parent_key_slot, uint32_t index, bool is_hardened)</argsstring>
                <name>genWalletChildKey</name>
                <param>
                    <type>int</type>
                    <declname>parent_key_slot</declname>
                </param>
                <param>
                    <type>uint32_t</type>
                    <declname>index</declname>
                </param>
                <param>
                    <type>bool</type>
                    <declname>is_hardened</declname>
                </param>
                <briefdescription>
                    <para>Generate child key from a parent key in a blockchain wallet . (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function generates a new child key descendent from a specified parent key in a wallet. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>parent_key_slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The parent key slot to base the child key derivation on. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>index</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The index of the child seed. This determines the node address as well as the outcome of the key generation. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>is_hardened</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>If true, a hardened key is generated. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Allocated slot number if successful, less than 0 for failure. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="665" column="13"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a662cc8f8533943d84eedcddc261ce223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkAppUtils::zkClass::restoreWalletMasterSeedFromMnemonic</definition>
                <argsstring>(ZK_EC_KEY_TYPE type, std::string &amp;wallet_name, byteArray &amp;master_generator_key, recoveryStrategyBaseType &amp;recovery_strategy, std::string &amp;mnemonic)</argsstring>
                <name>restoreWalletMasterSeedFromMnemonic</name>
                <param>
                    <type>ZK_EC_KEY_TYPE</type>
                    <declname>type</declname>
                </param>
                <param>
                    <type>std::string &amp;</type>
                    <declname>wallet_name</declname>
                </param>
                <param>
                    <type>
                        <ref refid="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" kindref="member">byteArray</ref> &amp;</type>
                    <declname>master_generator_key</declname>
                </param>
                <param>
                    <type>
                        <ref refid="classzk_app_utils_1_1recovery_strategy_base_type" kindref="compound">recoveryStrategyBaseType</ref> &amp;</type>
                    <declname>recovery_strategy</declname>
                </param>
                <param>
                    <type>std::string &amp;</type>
                    <declname>mnemonic</declname>
                </param>
                <briefdescription>
                    <para>Restore a master seed from a BIP39 mnemonic and a master generator key. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function restores a wallet master seed from a supplied BIP39 mnemonic string and a master generator key. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>type</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The type of key to generate (ZK_KEY_TYPE). {ZK_NISTP256, ZK_SECP256R1 = ZK_NISTP256, ZK_SECP256K1} </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>wallet_name</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>An ASCII string which contains the name of the wallet. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>master_generator_key</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The master generator key used to help generate the master seed. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>recovery_strategy</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The recovery strategy used. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>mnemonic</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The mnemonic string, null terminated and UTF-8 NFKD encoded from the BIP39 English dictionary. <linebreak/>
                                    </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>Allocated slot number if successful, less than 0 for failure. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="688" column="13"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a62bc7fcc98b1b71507a959451322fc31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkAppUtils::zkClass::getWalletNodeAddrFromKeySlot</definition>
                <argsstring>(int slot, std::string *out_node_addr, std::string *out_wallet_name=NULL)</argsstring>
                <name>getWalletNodeAddrFromKeySlot</name>
                <param>
                    <type>int</type>
                    <declname>slot</declname>
                </param>
                <param>
                    <type>std::string *</type>
                    <declname>out_node_addr</declname>
                </param>
                <param>
                    <type>std::string *</type>
                    <declname>out_wallet_name</declname>
                    <defval>NULL</defval>
                </param>
                <briefdescription>
                    <para>Derive the node address from a key slot number. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function derives a node address from an input key slot number. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) A key slot number that is part of a digital wallet. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>out_node_addr</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(output) A pointer to a string which will contain the node address in ASCII. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>wallet_name</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(output) A pointer to a string which will contain the wallet name in ASCII. If NULL, this parameter will not be retrieved. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The master seed key slot. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="706" column="13"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1af955d4038166b61c98da8d6a03796f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>int</type>
                <definition>int zkAppUtils::zkClass::getWalletKeySlotFromNodeAddr</definition>
                <argsstring>(std::string &amp;node_addr, std::string &amp;wallet_name, int master_seed_slot)</argsstring>
                <name>getWalletKeySlotFromNodeAddr</name>
                <param>
                    <type>std::string &amp;</type>
                    <declname>node_addr</declname>
                </param>
                <param>
                    <type>std::string &amp;</type>
                    <declname>wallet_name</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>master_seed_slot</declname>
                </param>
                <briefdescription>
                    <para>Derive the slot address from a node address. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function returns the slot number associated with a given node address. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>node_addr</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) A pointer which contains the node address in ASCII. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>wallet_name</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) A pointer which contains the wallet name in ASCII, used to identify the wallet identity. If desired, this parameter can be NULL and the master_seed_slot parameter can be specified instead. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>master_seed_slot</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) The master seed slot. Can be used to specify the wallet identity instead of the wallet name. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The associated key slot. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="725" column="13"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>LED Control</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a0071ea33df7fcddd04d53c1314d535c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::ledOff</definition>
                <argsstring>()</argsstring>
                <name>ledOff</name>
                <briefdescription>
                    <para>Turn LED off. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="743" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a8531fbc0c9c218131d8e583d5275c8c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::ledOn</definition>
                <argsstring>()</argsstring>
                <name>ledOn</name>
                <briefdescription>
                    <para>Turn LED on. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="748" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a40f09d223beda138c8cb94fb6104caca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::ledFlash</definition>
                <argsstring>(uint32_t on_ms, uint32_t off_ms=0, uint32_t num_flashes=0)</argsstring>
                <name>ledFlash</name>
                <param>
                    <type>uint32_t</type>
                    <declname>on_ms</declname>
                </param>
                <param>
                    <type>uint32_t</type>
                    <declname>off_ms</declname>
                    <defval>0</defval>
                </param>
                <param>
                    <type>uint32_t</type>
                    <declname>num_flashes</declname>
                    <defval>0</defval>
                </param>
                <briefdescription>
                    <para>Flash LED a certain number of times. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>on_ms</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of milliseconds that the LED will be on during a flash cycle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>off_ms</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of milliseconds that the LED will be off during a flash cycle </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>num_flashes</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Number of flash cycles to execute. 0 = infinite. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="759" column="14"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Administrative</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1acd808f1709fcc0a8cdda9de14763ff1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::setI2CAddr</definition>
                <argsstring>(int addr)</argsstring>
                <name>setI2CAddr</name>
                <param>
                    <type>int</type>
                    <declname>addr</declname>
                </param>
                <briefdescription>
                    <para>Sets the i2c address (i2c versions only). Used in case of i2c bus device address conflict. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>addr</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>The i2c address to set. Upon successful change, the Zymkey will reset itself. However, if the address is the same as the current setting, the Zymkey will not reset. Valid address ranges are 0x30 - 0x37 and 0x60 - 0x67. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="781" column="14"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Time</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ac31d4badb6328045e8cab672e3394018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>uint32_t</type>
                <definition>uint32_t zkAppUtils::zkClass::getTime</definition>
                <argsstring>(bool precise_time=false)</argsstring>
                <name>getTime</name>
                <param>
                    <type>bool</type>
                    <declname>precise_time</declname>
                    <defval>false</defval>
                </param>
                <briefdescription>
                    <para>Get current GMT time. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This method is called to get the time directly from a Zymkey's Real Time Clock (RTC) <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>precise_time</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) If true, this API returns the time after the next second falls. This means that the caller could be blocked up to one second. If false, the API returns immediately with the current time reading. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>The time in seconds from the epoch (Jan. 1, 1970). </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="802" column="18"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Accelerometer</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ac9d8a6cc388eaf2b37099929da776a59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::setTapSensitivity</definition>
                <argsstring>(float pct, ZK_ACCEL_AXIS_TYPE axis=ZK_ACCEL_AXIS_ALL)</argsstring>
                <name>setTapSensitivity</name>
                <param>
                    <type>float</type>
                    <declname>pct</declname>
                </param>
                <param>
                    <type>ZK_ACCEL_AXIS_TYPE</type>
                    <declname>axis</declname>
                    <defval>ZK_ACCEL_AXIS_ALL</defval>
                </param>
                <briefdescription>
                    <para>Sets the sensitivity of the tap detection as a percentage for an individual axis or all axes. </para>
                </briefdescription>
                <detaileddescription>
                    <para>
                        <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>pct</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>Sensitivity expressed in percentage. 0% = off, 100% = maximum. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>axis</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>X, Y, Z or all (default). </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="821" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ab00515782c453df5103905b5058fc21f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::waitForTap</definition>
                <argsstring>(uint32_t timeout_ms)</argsstring>
                <name>waitForTap</name>
                <param>
                    <type>uint32_t</type>
                    <declname>timeout_ms</declname>
                </param>
                <briefdescription>
                    <para>Wait for a tap event to be detected. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function is called in order to wait for a tap event to occur. This function blocks the calling thread unless called with a timeout of zero. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timeout_ms</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) The maximum amount of time in milliseconds to wait for a tap event to arrive. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsTimeoutException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon timeout or zkAppUtilsException upon other errors </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="834" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ae9c5c2c67b60cea02fd13e5f545158a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::getAccelerometerData</definition>
                <argsstring>(accelData &amp;accel_data)</argsstring>
                <name>getAccelerometerData</name>
                <param>
                    <type>
                        <ref refid="structzk_app_utils_1_1accel_data" kindref="compound">accelData</ref> &amp;</type>
                    <declname>accel_data</declname>
                </param>
                <briefdescription>
                    <para>Get current accelerometer data and tap info. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function gets the most recent accelerometer data in units of g forces plus the tap direction per axis. Array index 0 = x 1 = y 2 = z <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>accel_data</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(output) The current accelerometer data and tap information </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="846" column="14"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Binding Management</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a88a59ed6eca3f5bd83895d2fabac0000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::lockBinding</definition>
                <argsstring>()</argsstring>
                <name>lockBinding</name>
                <briefdescription>
                    <para>Set soft binding lock. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function locks the binding for a specific HSM. This API is only valid for HSM series products. <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="862" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a984102f5f0bfdd298db1fb67b1e2111e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::getCurrentBindingInfo</definition>
                <argsstring>(bool &amp;binding_is_locked, bool &amp;is_bound)</argsstring>
                <name>getCurrentBindingInfo</name>
                <param>
                    <type>bool &amp;</type>
                    <declname>binding_is_locked</declname>
                </param>
                <param>
                    <type>bool &amp;</type>
                    <declname>is_bound</declname>
                </param>
                <briefdescription>
                    <para>Get current binding info. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function gets the current binding lock state as well as the current binding state. This API is only valid for devices in the HSM family. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>binding_is_locked</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(output) Binary value which expresses the current binding lock state. is_bound (output) Binary value which expresses the current bind state. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="875" column="14"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Perimeter Detect</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a2bf03172ebb08f4b8aef9d2541545cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::setPerimeterEventAction</definition>
                <argsstring>(int channel, uint32_t action_flags)</argsstring>
                <name>setPerimeterEventAction</name>
                <param>
                    <type>int</type>
                    <declname>channel</declname>
                </param>
                <param>
                    <type>uint32_t</type>
                    <declname>action_flags</declname>
                </param>
                <briefdescription>
                    <para>Set perimeter breach action. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function specifies the action to take when a perimeter breach event occurs. The possible actions are any combination of:<itemizedlist>
                            <listitem>
                                <para>Notify host</para>
                            </listitem>
                            <listitem>
                                <para>Zymkey self-destruct <parameterlist kind="param">
                                        <parameteritem>
                                            <parameternamelist>
                                                <parametername>channel</parametername>
                                            </parameternamelist>
                                            <parameterdescription>
                                                <para>(input) The channel (0 or 1) that the action flags will be applied to. </para>
                                            </parameterdescription>
                                        </parameteritem>
                                        <parameteritem>
                                            <parameternamelist>
                                                <parametername>action_flags</parametername>
                                            </parameternamelist>
                                            <parameterdescription>
                                                <para>(input) The actions to apply to the perimeter event channel:<itemizedlist>
                                                        <listitem>
                                                            <para>Notify (ZK_PERIMETER_EVENT_ACTION_NOTIFY)</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>Self-destruct (ZK_PERIMETER_EVENT_ACTION_SELF_DESTRUCT) </para>
                                                        </listitem>
                                                    </itemizedlist>
                                                </para>
                                            </parameterdescription>
                                        </parameteritem>
                                    </parameterlist>
                                    <parameterlist kind="exception">
                                        <parameteritem>
                                            <parameternamelist>
                                                <parametername>zkAppUtilsException</parametername>
                                            </parameternamelist>
                                            <parameterdescription>
                                                <para>upon error </para>
                                            </parameterdescription>
                                        </parameteritem>
                                    </parameterlist>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="899" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a435c6ceebccb97bcaf8316a853b0f220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::setDigitalPerimeterDetectLPPeriod</definition>
                <argsstring>(int lp_period)</argsstring>
                <name>setDigitalPerimeterDetectLPPeriod</name>
                <param>
                    <type>int</type>
                    <declname>lp_period</declname>
                </param>
                <briefdescription>
                    <para>Set the low power period (model &gt;= HSM6). </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function sets low power period on the digital perimeter detect <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>lp_period</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) low power period in microseconds </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>void. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="907" column="6"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1aa78c0fb85fefdf67ba5292024718bdcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::setDigitalPerimeterDetectLPMaxBits</definition>
                <argsstring>(int max_num_bits)</argsstring>
                <name>setDigitalPerimeterDetectLPMaxBits</name>
                <param>
                    <type>int</type>
                    <declname>max_num_bits</declname>
                </param>
                <briefdescription>
                    <para>Set the low power max number of bits (model &gt;= HSM6). </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function sets low power max number of bits on the digital perimeter detect <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>max_num_bits</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) max number of bits </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>void. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="915" column="6"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a21ffee7105f368c8f72d6fd36de577f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::setDigitalPerimeterDetectDelays</definition>
                <argsstring>(int min_delay_ns, int max_delay_ns)</argsstring>
                <name>setDigitalPerimeterDetectDelays</name>
                <param>
                    <type>int</type>
                    <declname>min_delay_ns</declname>
                </param>
                <param>
                    <type>int</type>
                    <declname>max_delay_ns</declname>
                </param>
                <briefdescription>
                    <para>Set the delays (model &gt;= HSM6). </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function sets delays on the digital perimeter detect <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>min_delay_ns</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) minimum delay in nanoseconds </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>max_delay_ns</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) maximum delay in nanoseconds </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>void. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="926" column="6"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a0b2fcd99b282a30b779560375eb6e54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::waitForPerimeterEvent</definition>
                <argsstring>(uint32_t timeout_ms)</argsstring>
                <name>waitForPerimeterEvent</name>
                <param>
                    <type>uint32_t</type>
                    <declname>timeout_ms</declname>
                </param>
                <briefdescription>
                    <para>Wait for a perimeter breach event to be detected. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function is called in order to wait for a perimeter breach event to occur. This function blocks the calling thread unless called with a timeout of zero. Note that, in order to receive perimeter events, the zymkey must have been configured to notify the host on either or both of the perimeter detect channels via a call to "zkSetPerimeterEventAction". <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timeout_ms</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) The maximum amount of time in milliseconds to wait for a perimeter event to arrive. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="942" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a57aa4d041fe70d3d2728b4de44d4e6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::getPerimeterDetectInfo</definition>
                <argsstring>(uint32_t **timestamp_sec, int &amp;num_timestamps)</argsstring>
                <name>getPerimeterDetectInfo</name>
                <param>
                    <type>uint32_t **</type>
                    <declname>timestamp_sec</declname>
                </param>
                <param>
                    <type>int &amp;</type>
                    <declname>num_timestamps</declname>
                </param>
                <briefdescription>
                    <para>Get current perimeter detect info. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function gets the timestamp of the first perimeter detect event for the given channel <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>timestamps_sec</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(output) The timestamps for when any events occurred. The index in this array corresponds to the channel number used by zkSetPerimeterEventAction. A 0 value means no breach has occurred on this channel. This array is allocated by this routine and so it must be freed by the caller. </para>
                                </parameterdescription>
                            </parameteritem>
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>num_timestamps</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(output) The number of timestamps in the returned array </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="956" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1af94e6c0e537f18e320c65728764e5ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::clearPerimeterDetectEvents</definition>
                <argsstring>()</argsstring>
                <name>clearPerimeterDetectEvents</name>
                <briefdescription>
                    <para>Clear perimeter detect info. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function clears all perimeter detect info and rearms all perimeter detect channels <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="963" column="14"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a732b084f85070c00ef2423f76aba29e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>std::string *</type>
                <definition>std::string* zkAppUtils::zkClass::getModelNumberString</definition>
                <argsstring>()</argsstring>
                <name>getModelNumberString</name>
                <briefdescription>
                    <para>Get Zymkey model number. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function retrieves the model number of the zymkey referred to in a specified context <simplesect kind="return">
                            <para>A pointer to a string containing the Zymkey model number. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="969" column="13"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a00d5031efc2b7040db08da5e86e85e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>std::string *</type>
                <definition>std::string* zkAppUtils::zkClass::getFirmwareVersionString</definition>
                <argsstring>()</argsstring>
                <name>getFirmwareVersionString</name>
                <briefdescription>
                    <para>Get Zymkey firmware version. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function retrieves the firmware version of the zymkey referred to in a specified context. <simplesect kind="return">
                            <para>A pointer to a string containing the Zymkey firmware version. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="975" column="13"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ab545df4772a4c23fae3e970a9e185a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>std::string *</type>
                <definition>std::string* zkAppUtils::zkClass::getSerialNumberString</definition>
                <argsstring>()</argsstring>
                <name>getSerialNumberString</name>
                <briefdescription>
                    <para>Get Zymkey serial number. </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function retrieves the serial number of the zymkey referred to in a specified context. <simplesect kind="return">
                            <para>A pointer to a string containing the Zymkey serial number. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="981" column="13"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Module Info</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a6956a4bedbe0baee05318807605dc674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>float</type>
                <definition>float zkAppUtils::zkClass::getCPUTemp</definition>
                <argsstring>()</argsstring>
                <name>getCPUTemp</name>
                <briefdescription>
                    <para>Get the CPU Temp. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function gets the current HSM CPU temp. <simplesect kind="return">
                            <para>The CPU temp as a float. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="993" column="15"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a2a9214bf2810417108ea300ff79b6d46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>float</type>
                <definition>float zkAppUtils::zkClass::getRTCDrift</definition>
                <argsstring>()</argsstring>
                <name>getRTCDrift</name>
                <briefdescription>
                    <para>Get the RTC drift. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function gets the current RTC drift. <simplesect kind="return">
                            <para>The RTC drift as a float. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="998" column="15"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1acaf94e9560d986f54750718ce6f12402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>float</type>
                <definition>float zkAppUtils::zkClass::getBatteryVoltage</definition>
                <argsstring>()</argsstring>
                <name>getBatteryVoltage</name>
                <briefdescription>
                    <para>Get the battery voltage(model &gt;= HSM6). </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function gets the current battery voltage <simplesect kind="return">
                            <para>the battery voltage as a float. </para>
                        </simplesect>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="1003" column="7"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>Battery Voltage Monitor</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a374940c6de51d1a2bf9259d0542e0b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::setBatteryVoltageAction</definition>
                <argsstring>(ZK_THRESHOLD_ACTION_TYPE action)</argsstring>
                <name>setBatteryVoltageAction</name>
                <param>
                    <type>ZK_THRESHOLD_ACTION_TYPE</type>
                    <declname>action</declname>
                </param>
                <briefdescription>
                    <para>Set battery voltage threshold action. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function specifies the action to take when the battery voltage falls below the threshold set by zkSetBatteryVoltageThreshold. If this function is never called, do nothing is default. There are three actions:<itemizedlist>
                            <listitem>
                                <para>Do nothing</para>
                            </listitem>
                            <listitem>
                                <para>Go to sleep until battery is replaced</para>
                            </listitem>
                            <listitem>
                                <para>Self-destruct <parameterlist kind="param">
                                        <parameteritem>
                                            <parameternamelist>
                                                <parametername>action</parametername>
                                            </parameternamelist>
                                            <parameterdescription>
                                                <para>(input) The action to apply, specify one of the ZK_THRESHOLD_ACTION_TYPE:<itemizedlist>
                                                        <listitem>
                                                            <para>Do nothing (ZK_ACTION_NONE)</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>Sleep (ZK_ACTION_SLEEP)</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>Self-destruct (ZK_ACTION_SELF_DESTRUCT) </para>
                                                        </listitem>
                                                    </itemizedlist>
                                                </para>
                                            </parameterdescription>
                                        </parameteritem>
                                    </parameterlist>
                                    <parameterlist kind="exception">
                                        <parameteritem>
                                            <parameternamelist>
                                                <parametername>zkAppUtilsException</parametername>
                                            </parameternamelist>
                                            <parameterdescription>
                                                <para>upon error </para>
                                            </parameterdescription>
                                        </parameteritem>
                                    </parameterlist>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="1027" column="8"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1af48b1f11765f94cc8f707101f197eeb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::setBatteryVoltageThreshold</definition>
                <argsstring>(float threshold)</argsstring>
                <name>setBatteryVoltageThreshold</name>
                <param>
                    <type>float</type>
                    <declname>threshold</declname>
                </param>
                <briefdescription>
                    <para>Sets the battery voltage threshold. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function sets the threshold at which if the battery voltage falls bellow, the action set by zkSetBatteryVoltageAction will be carried out. The recommended threshold is 2.3V is assumed by default. Threshold must be below 2.5V. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>threshold</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) The threshold in Volts. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="1040" column="8"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="user-defined">
            <header>CPU Temperature Monitor</header>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1ada7ce931928fedde9cec5c15cb1d1d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::setCPUTempAction</definition>
                <argsstring>(ZK_THRESHOLD_ACTION_TYPE action)</argsstring>
                <name>setCPUTempAction</name>
                <param>
                    <type>ZK_THRESHOLD_ACTION_TYPE</type>
                    <declname>action</declname>
                </param>
                <briefdescription>
                    <para>Set HSM CPU temperature threshold action. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function specifies the action to take when the HSM CPU temperature falls below the threshold set by zkSetCPULowTempThreshold, or rises above the threshold set by zkSetCPUHighTempThreshold. There are two actions to apply:<itemizedlist>
                            <listitem>
                                <para>Do nothing</para>
                            </listitem>
                            <listitem>
                                <para>Self-destruct <parameterlist kind="param">
                                        <parameteritem>
                                            <parameternamelist>
                                                <parametername>action</parametername>
                                            </parameternamelist>
                                            <parameterdescription>
                                                <para>(input) The action to apply, used it's named constant from ZK_THRESHOLD_ACTION_TYPE:<itemizedlist>
                                                        <listitem>
                                                            <para>Do nothing (ZK_ACTION_NONE)</para>
                                                        </listitem>
                                                        <listitem>
                                                            <para>Self-destruct (ZK_ACTION_SELF_DESTRUCT) </para>
                                                        </listitem>
                                                    </itemizedlist>
                                                </para>
                                            </parameterdescription>
                                        </parameteritem>
                                    </parameterlist>
                                    <parameterlist kind="exception">
                                        <parameteritem>
                                            <parameternamelist>
                                                <parametername>zkAppUtilsException</parametername>
                                            </parameternamelist>
                                            <parameterdescription>
                                                <para>upon error </para>
                                            </parameterdescription>
                                        </parameteritem>
                                    </parameterlist>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="1064" column="8"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1aee3dcb54cfa647f1f51b81d539ceb1d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::setCPULowTempThreshold</definition>
                <argsstring>(float threshold)</argsstring>
                <name>setCPULowTempThreshold</name>
                <param>
                    <type>float</type>
                    <declname>threshold</declname>
                </param>
                <briefdescription>
                    <para>Sets the HSM CPU low temperature threshold. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function sets the threshold at which if the on-board HSM CPU's tempreature falls below, the action set by zkSetCPUTempAction will be carried out. WARNING: You can lock yourself out in dev mode if you set a threshold above the CPU's ambient temperature. The recommended setting is no more than 20C. If no threshold is set, -10 degrees Celsius is set as default. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>threshold</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) The threshold in celsius. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <parameterlist kind="exception">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>zkAppUtilsException</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>upon error </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="1080" column="8"/>
            </memberdef>
            <memberdef kind="function" id="classzk_app_utils_1_1zk_class_1a7ca53d9e747c76a88be85aad6ed60e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
                <type>void</type>
                <definition>void zkAppUtils::zkClass::setCPUHighTempThreshold</definition>
                <argsstring>(float threshold)</argsstring>
                <name>setCPUHighTempThreshold</name>
                <param>
                    <type>float</type>
                    <declname>threshold</declname>
                </param>
                <briefdescription>
                    <para>Sets the HSM CPU high temperature threshold. (model &gt;= HSM6) </para>
                </briefdescription>
                <detaileddescription>
                    <para>This function sets the threshold at which if the on-board HSM CPU's tempreature rises above, the action set by zkSetCPUTempAction will be carried out. WARNING: You can lock yourself out in dev mode if you set a threshold below the CPU's ambient temperature. The recommended setting is no less than 40C. If no threshold is set, 65 degrees celsius is set as default. <parameterlist kind="param">
                            <parameteritem>
                                <parameternamelist>
                                    <parametername>threshold</parametername>
                                </parameternamelist>
                                <parameterdescription>
                                    <para>(input) The threshold in celsius. </para>
                                </parameterdescription>
                            </parameteritem>
                        </parameterlist>
                        <simplesect kind="return">
                            <para>0 for success, less than 0 for failure. </para>
                        </simplesect>
                    </para>
                </detaileddescription>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="1096" column="8"/>
            </memberdef>
        </sectiondef>
        <sectiondef kind="private-attrib">
            <memberdef kind="variable" id="classzk_app_utils_1_1zk_class_1ad031ca546148ceb59ec648fab2be6722" prot="private" static="no" mutable="no">
                <type>zkCTX</type>
                <definition>zkCTX zkAppUtils::zkClass::zkContext</definition>
                <argsstring/>
                <name>zkContext</name>
                <briefdescription/>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="1105" column="15" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="1105" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <briefdescription>
            <para>The main class. </para>
        </briefdescription>
        <detaileddescription/>
        <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="161" column="1" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="162" bodyend="1106"/>
        <listofallmembers>
            <member refid="classzk_app_utils_1_1zk_class_1af94e6c0e537f18e320c65728764e5ca8" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>clearPerimeterDetectEvents</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a9a4a7c019b82d8b1760ae9f743de944d" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>createRandDataFile</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ab730469e9e5ffb217455a775960732d1" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>disablePubKeyExport</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ac969e9bb26200c34d9b80b6b3287fc4f" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>doECDHAndKDF</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ad76f1a1781c845623194d7d3e420796f" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>doECDHAndKDFWithIntPeerPubkey</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a094c61c54bcc4c064e961a75ad92c04b" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>doRawECDH</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ac4c9c958cb219943bf590debfff42d8e" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>doRawECDHWithIntPeerPubkey</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ae13277c55222907a21537b790279d214" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>exportPubKey</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a1bdc2d2f9d479a28af6de6cd7889020b" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>exportPubKey2File</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1aa4da8d53be65803af718a336407ea6d2" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>genECDSASigFromDigest</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a11af5c32dc4d0a87b072e7b056a550e0" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>genECDSASigFromDigest</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ada05198c035f694fda303a8b7e30b4b5" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>genEphemeralKeyPair</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1afa4595edba19c2c98109763898dbfc9a" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>genKeyPair</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a908e3ce1eb468f08d48d542d0b27145e" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>genWalletChildKey</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ab78a31c0b1ae4111ace049fdfa5e9eb9" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>genWalletMasterSeed</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ae9c5c2c67b60cea02fd13e5f545158a6" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getAccelerometerData</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a636729b4700e21c3392bd75aac2d8873" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getAllocSlotsList</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1acaf94e9560d986f54750718ce6f12402" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getBatteryVoltage</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a6956a4bedbe0baee05318807605dc674" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getCPUTemp</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a984102f5f0bfdd298db1fb67b1e2111e" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getCurrentBindingInfo</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a545db81233e96730f9d33af01b6983b4" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getECDSAPubKey</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a00d5031efc2b7040db08da5e86e85e2c" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getFirmwareVersionString</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a732b084f85070c00ef2423f76aba29e2" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getModelNumberString</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a57aa4d041fe70d3d2728b4de44d4e6eb" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getPerimeterDetectInfo</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ae6c1bc3ff39beea99f72e7740c528313" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getRandBytes</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a2a9214bf2810417108ea300ff79b6d46" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getRTCDrift</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ab545df4772a4c23fae3e970a9e185a38" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getSerialNumberString</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ac31d4badb6328045e8cab672e3394018" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getTime</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1af955d4038166b61c98da8d6a03796f1c" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getWalletKeySlotFromNodeAddr</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a62bc7fcc98b1b71507a959451322fc31" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>getWalletNodeAddrFromKeySlot</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a2b2d25ba5fa9e7ddd56e293aeac069c6" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>invalidateEphemeralKey</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a40f09d223beda138c8cb94fb6104caca" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>ledFlash</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a0071ea33df7fcddd04d53c1314d535c3" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>ledOff</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a8531fbc0c9c218131d8e583d5275c8c9" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>ledOn</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a88a59ed6eca3f5bd83895d2fabac0000" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>lockBinding</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a65aee74e18121f104b8420822013452e" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>lockData</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a12a0b56f2d9957e4f6f66964b1dc88c8" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>lockData</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a749ea09595c364126d54f99022d4ceb6" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>lockData</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a5302506bc51be472e44f3f21b7223a2e" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>lockData</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a62f486dc7c3502fd49c43f628a48fd62" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>removeKey</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a662cc8f8533943d84eedcddc261ce223" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>restoreWalletMasterSeedFromMnemonic</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a90e0ace2d84e42b6ccdaad122f9035c8" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>saveECDSAPubKey2File</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a374940c6de51d1a2bf9259d0542e0b0c" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>setBatteryVoltageAction</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1af48b1f11765f94cc8f707101f197eeb5" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>setBatteryVoltageThreshold</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a7ca53d9e747c76a88be85aad6ed60e3b" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>setCPUHighTempThreshold</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1aee3dcb54cfa647f1f51b81d539ceb1d6" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>setCPULowTempThreshold</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ada7ce931928fedde9cec5c15cb1d1d91" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>setCPUTempAction</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a21ffee7105f368c8f72d6fd36de577f4" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>setDigitalPerimeterDetectDelays</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1aa78c0fb85fefdf67ba5292024718bdcf" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>setDigitalPerimeterDetectLPMaxBits</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a435c6ceebccb97bcaf8316a853b0f220" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>setDigitalPerimeterDetectLPPeriod</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1acd808f1709fcc0a8cdda9de14763ff1b" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>setI2CAddr</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a2bf03172ebb08f4b8aef9d2541545cdf" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>setPerimeterEventAction</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ac9d8a6cc388eaf2b37099929da776a59" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>setTapSensitivity</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1aa95d4e59e180197bf8e847b4d52d5001" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>storeForeignPubKey</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a0ecbe6c828556f8f762fb74e628f13af" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>unlockData</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a40befc1bfc64e6a06e2169c8a102cd2f" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>unlockData</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ada1f322ad059f421c48af150a5a0beec" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>unlockData</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a0c33653e5fe062d0784f64e4ac07ce08" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>unlockData</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a5046d6ddc2fb67c7c352df859c84089d" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>verifyECDSASigFromDigest</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a0b2fcd99b282a30b779560375eb6e54f" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>waitForPerimeterEvent</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ab00515782c453df5103905b5058fc21f" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>waitForTap</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1af2017a24669f2f1f84743ab8eb1b2e6d" prot="public" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>zkClass</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1ad031ca546148ceb59ec648fab2be6722" prot="private" virt="non-virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>zkContext</name>
            </member>
            <member refid="classzk_app_utils_1_1zk_class_1a9fd36f5cebc6fc718abd7c63b0e30035" prot="public" virt="virtual">
                <scope>zkAppUtils::zkClass</scope>
                <name>~zkClass</name>
            </member>
        </listofallmembers>
    </compounddef>
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespacestd" kind="namespace" language="C++">
        <compoundname>std</compoundname>
        <briefdescription/>
        <detaileddescription/>
        <location file="[generated]" line="1" column="1"/>
    </compounddef>
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespacezk_app_utils" kind="namespace" language="C++">
        <compoundname>zkAppUtils</compoundname>
        <innerclass refid="classzk_app_utils_1_1common_exception" prot="public">zkAppUtils::commonException</innerclass>
        <innerclass refid="classzk_app_utils_1_1timeout_exception" prot="public">zkAppUtils::timeoutException</innerclass>
        <innerclass refid="classzk_app_utils_1_1recovery_strategy_base_type" prot="public">zkAppUtils::recoveryStrategyBaseType</innerclass>
        <innerclass refid="classzk_app_utils_1_1recovery_strategy_bip39" prot="public">zkAppUtils::recoveryStrategyBip39</innerclass>
        <innerclass refid="classzk_app_utils_1_1recovery_strategy_slip39" prot="public">zkAppUtils::recoveryStrategySlip39</innerclass>
        <innerclass refid="structzk_app_utils_1_1accel_data" prot="public">zkAppUtils::accelData</innerclass>
        <innerclass refid="classzk_app_utils_1_1zk_class" prot="public">zkAppUtils::zkClass</innerclass>
        <sectiondef kind="typedef">
            <memberdef kind="typedef" id="namespacezk_app_utils_1a8cb247b41a182478fcdf780c1ce524e3" prot="public" static="no">
                <type>std::vector&lt; uint8_t &gt;</type>
                <definition>typedef std::vector&lt;uint8_t&gt; zkAppUtils::byteArray</definition>
                <argsstring/>
                <name>byteArray</name>
                <briefdescription>
                    <para>Typedef for a simple unsigned bytes container. </para>
                </briefdescription>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="151" column="21" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="151" bodyend="-1"/>
            </memberdef>
            <memberdef kind="typedef" id="namespacezk_app_utils_1a7cc12af0cdc6374a29588629bd450da6" prot="public" static="no">
                <type>std::vector&lt; int &gt;</type>
                <definition>typedef std::vector&lt;int&gt; zkAppUtils::intArray</definition>
                <argsstring/>
                <name>intArray</name>
                <briefdescription>
                    <para>Typedef for a simple integer container. </para>
                </briefdescription>
                <detaileddescription/>
                <inbodydescription/>
                <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="156" column="21" bodyfile="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" bodystart="156" bodyend="-1"/>
            </memberdef>
        </sectiondef>
        <briefdescription/>
        <detaileddescription/>
        <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h" line="29" column="1"/>
    </compounddef>
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="zk_app_utils_class_8h" kind="file" language="C++">
        <compoundname>zkAppUtilsClass.h</compoundname>
        <includes local="no">zk_app_utils.h</includes>
        <includes local="no">exception</includes>
        <includes local="no">string</includes>
        <includes local="no">vector</includes>
        <incdepgraph>
            <node id="1">
                <label>/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h</label>
                <link refid="zk_app_utils_class_8h"/>
                <childnode refid="2" relation="include"/>
                <childnode refid="3" relation="include"/>
                <childnode refid="4" relation="include"/>
                <childnode refid="5" relation="include"/>
            </node>
            <node id="4">
                <label>string</label>
            </node>
            <node id="3">
                <label>exception</label>
            </node>
            <node id="5">
                <label>vector</label>
            </node>
            <node id="2">
                <label>zk_app_utils.h</label>
            </node>
        </incdepgraph>
        <innerclass refid="classzk_app_utils_1_1common_exception" prot="public">zkAppUtils::commonException</innerclass>
        <innerclass refid="classzk_app_utils_1_1timeout_exception" prot="public">zkAppUtils::timeoutException</innerclass>
        <innerclass refid="classzk_app_utils_1_1recovery_strategy_base_type" prot="public">zkAppUtils::recoveryStrategyBaseType</innerclass>
        <innerclass refid="classzk_app_utils_1_1recovery_strategy_bip39" prot="public">zkAppUtils::recoveryStrategyBip39</innerclass>
        <innerclass refid="classzk_app_utils_1_1recovery_strategy_slip39" prot="public">zkAppUtils::recoveryStrategySlip39</innerclass>
        <innerclass refid="structzk_app_utils_1_1accel_data" prot="public">zkAppUtils::accelData</innerclass>
        <innerclass refid="classzk_app_utils_1_1zk_class" prot="public">zkAppUtils::zkClass</innerclass>
        <innernamespace refid="namespacezk_app_utils">zkAppUtils</innernamespace>
        <briefdescription>
            <para>C++ interface to Zymkey Application Utilities Library. </para>
        </briefdescription>
        <detaileddescription>
            <para>
                <simplesect kind="author">
                    <para>Scott Miller </para>
                </simplesect>
                <simplesect kind="version">
                    <para>1.0 </para>
                </simplesect>
                <simplesect kind="date">
                    <para>November 17, 2016 </para>
                </simplesect>
                <simplesect kind="copyright">
                    <para>Zymbit, Inc.</para>
                </simplesect>
This file contains the C API to the the Zymkey Application Utilities library. This API facilitates writing user space applications which use Zymkey to perform cryptographic operations, such as:<orderedlist>
                    <listitem>
                        <para>Signing of payloads using ECDSA</para>
                    </listitem>
                    <listitem>
                        <para>Verification of payloads that were signed using Zymkey</para>
                    </listitem>
                    <listitem>
                        <para>Exporting the public key that matches Zymkey's private key</para>
                    </listitem>
                    <listitem>
                        <para>"Locking" and "unlocking" data objects</para>
                    </listitem>
                    <listitem>
                        <para>Generating random data Additionally, there are functions for changing the i2c address (i2c units only), setting tap sensitivity and controlling the LED. </para>
                    </listitem>
                </orderedlist>
            </para>
        </detaileddescription>
        <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/zkAppUtilsClass.h"/>
    </compounddef>
    <compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_2916f9fbcacdf2e5f0583aa159c707b6" kind="dir">
        <compoundname>/Users/nickanderegg/src/zymbit/zkapputilslib/C++</compoundname>
        <innerfile refid="zk_app_utils_class_8h">zkAppUtilsClass.h</innerfile>
        <briefdescription/>
        <detaileddescription/>
        <location file="/Users/nickanderegg/src/zymbit/zkapputilslib/C++/"/>
    </compounddef>
</doxygen>